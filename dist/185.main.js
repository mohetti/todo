(self.webpackChunktodo=self.webpackChunktodo||[]).push([[185,520],{185:(e,t,l)=>{"use strict";l.r(t),l.d(t,{newFolder:()=>r,styleHighlightedFolder:()=>a,delFromList:()=>s,rightClickHandler:()=>c});var d=l(256),n=l(520);let r=function(e,t){let l=document.createElement("li"),n=d.folderArray[d.folderArray.length-1].folder;e.appendChild(l),l.innerText=n,l.classList.add("folders"),t.value=""},i=null,o=document.getElementById("menu"),a=function(e){document.querySelectorAll(".folders").forEach((e=>e.classList.remove("highlight"))),e.classList.add("highlight"),i=e},s=function(){i.remove(),o.classList.remove("active"),(0,n.render)()},c=function(e){o.style.top=e.clientY+10+"px",o.style.left=e.clientX+10+"px",o.classList.add("active")}},520:(e,t,l)=>{"use strict";l.r(t),l.d(t,{displayTasks:()=>i,render:()=>r,openTask:()=>o});var d=l(256);let n=document.querySelector("#body"),r=function(){for(;n.firstChild;)n.removeChild(n.firstChild)},i=function(){r();let e=d.folderArray[d.folderArray.findIndex((e=>!0===e.highlight))],t=e.tasks;for(let d=0;d<t.length;d++){let r=document.createElement("ul");r.classList.add("task-display"),n.appendChild(r);let o=document.createElement("li");r.appendChild(o),o.innerText=t[d].title;let a=document.createElement("li");r.appendChild(a),a.innerText=t[d].date,l=r,"low"===(i=e.tasks[d].prio)?l.style.backgroundColor="green":"med"===i?l.style.backgroundColor="yellow":"high"===i&&(l.style.backgroundColor="red")}var l,i},o=function(e){let t=d.folderArray[d.folderArray.findIndex((e=>!0===e.highlight))].tasks;r();let l=t.findIndex((t=>t.title===e)),i=document.createElement("h2");i.id="task-text",n.appendChild(i),i.innerText=e;let o=document.createElement("h4");o.id="date-text",n.appendChild(o),o.innerText=t[l].date;let a=document.createElement("div");a.id="descr-text",n.appendChild(a),a.innerText=t[l].descr;for(let e=0;e<t[l].notes.length;e++){let d=document.createElement("div");d.classList.add("notes-text"),n.appendChild(d),d.innerText=t[l].notes[e]}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,