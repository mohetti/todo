(self.webpackChunktodo=self.webpackChunktodo||[]).push([[185,256],{185:(e,t,l)=>{"use strict";l.r(t),l.d(t,{newFolder:()=>i,styleHighlightedFolder:()=>d,delFromList:()=>s,rightClickHandler:()=>h});var r=l(256);let i=function(e){let t=document.createElement("li"),l=r.folderArray[r.folderArray.length-1].folder;e.appendChild(t),t.innerText=l,t.classList.add("folders"),t.dataset.indexNumber=r.folderArray.length-1},n=null,o=document.getElementById("menu"),d=function(e){document.querySelectorAll(".folders").forEach((e=>e.classList.remove("highlight"))),e.classList.add("highlight"),n=e},s=function(e){n.remove(),o.classList.remove("active")},h=function(e){o.style.top=e.clientY+10+"px",o.style.left=e.clientX+10+"px",o.classList.add("active")}},256:(e,t,l)=>{"use strict";l.r(t),l.d(t,{pushToFolderArray:()=>i,folderArray:()=>r,highlightTrue:()=>n,delListItem:()=>o});let r=[],i=function(e){return r.push(function(e){let t={};return t.folder=e.value,t.index=r.length,t.highlight=!1,t}(e)),r},n=function(e){r.map((t=>t.index===Number(e)?t.highlight=!0:t.highlight=!1))},o=function(e){console.log("I m working heeere")}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90b2RvLy4vc3JjL2RvbUZvbGRlci5qcyIsIndlYnBhY2s6Ly90b2RvLy4vc3JjL2ZvbGRlckxvZ2ljLmpzIl0sIm5hbWVzIjpbIm5ld0ZvbGRlciIsImZvbGRlckRpc3BsYXkiLCJsaSIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImZvbGRlclRleHQiLCJmb2xkZXJBcnJheSIsImZvbGRlciIsImFwcGVuZENoaWxkIiwiaW5uZXJUZXh0IiwiY2xhc3NMaXN0IiwiYWRkIiwiZGF0YXNldCIsImluZGV4TnVtYmVyIiwic3RvcmVJbmRleCIsIm1lbnUiLCJnZXRFbGVtZW50QnlJZCIsInN0eWxlSGlnaGxpZ2h0ZWRGb2xkZXIiLCJ0YXJnZXQiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZm9yRWFjaCIsIml0ZW0iLCJyZW1vdmUiLCJkZWxGcm9tTGlzdCIsInJpZ2h0Q2xpY2tIYW5kbGVyIiwiZXZlbnQiLCJzdHlsZSIsInRvcCIsImNsaWVudFkiLCJsZWZ0IiwiY2xpZW50WCIsInB1c2hUb0ZvbGRlckFycmF5IiwiZm9sZGVyTmFtZSIsInB1c2giLCJuZXdPYmoiLCJ2YWx1ZSIsImxlbmd0aCIsImNyZWF0ZUZvbGRlck9iaiIsImhpZ2hsaWdodFRydWUiLCJpbmRleCIsIm1hcCIsIngiLCJOdW1iZXIiLCJoaWdobGlnaHQiLCJkZWxMaXN0SXRlbSIsImNvbnNvbGUiLCJsb2ciXSwibWFwcGluZ3MiOiJrTkFFQSxJQUFJQSxFQUFZLFNBQWtCQyxHQUM5QixJQUFJQyxFQUFLQyxTQUFTQyxjQUFjLE1BQzVCQyxFQUFhLEVBQUFDLFlBQVksRUFBQUEsWUFBQSxPQUFvQixHQUFHQyxPQUVwRE4sRUFBY08sWUFBWU4sR0FDMUJBLEVBQUdPLFVBQVlKLEVBQ2ZILEVBQUdRLFVBQVVDLElBQUksV0FDakJULEVBQUdVLFFBQVFDLFlBQWMsRUFBQVAsWUFBQSxPQUFtQixHQUU1Q1EsRUFBYSxLQUNiQyxFQUFPWixTQUFTYSxlQUFlLFFBQy9CQyxFQUF5QixTQUFrQ0MsR0FDNUNmLFNBQVNnQixpQkFBaUIsWUFDaENDLFNBQVFDLEdBQVFBLEVBQUtYLFVBQVVZLE9BQU8sZUFDL0NKLEVBQU9SLFVBQVVDLElBQUksYUFDckJHLEVBQWFJLEdBR2JLLEVBQWMsU0FBc0JGLEdBQ3BDUCxFQUFXUSxTQUNYUCxFQUFLTCxVQUFVWSxPQUFPLFdBR3RCRSxFQUFvQixTQUE0QkMsR0FDNUNWLEVBQUtXLE1BQU1DLElBQU1GLEVBQU1HLFFBQVUsR0FBSyxLQUN0Q2IsRUFBS1csTUFBTUcsS0FBT0osRUFBTUssUUFBVSxHQUFLLEtBQ3ZDZixFQUFLTCxVQUFVQyxJQUFJLFksMkhDNUIzQixJQUFJTCxFQUFjLEdBVWR5QixFQUFvQixTQUEyQkMsR0FFL0MsT0FEQTFCLEVBQVkyQixLQVRNLFNBQXlCRCxHQUMzQyxJQUFJRSxFQUFTLEdBSWIsT0FIQUEsRUFBZSxPQUFJRixFQUFXRyxNQUM5QkQsRUFBYyxNQUFJNUIsRUFBWThCLE9BQzlCRixFQUFrQixXQUFJLEVBQ2YsRUFJVUcsQ0FBZ0JMLElBQzFCMUIsR0FHUGdDLEVBQWdCLFNBQXVCQyxHQUN2Q2pDLEVBQVlrQyxLQUFJQyxHQUFLQSxFQUFFRixRQUFVRyxPQUFPSCxHQUFTRSxFQUFFRSxXQUFZLEVBQU9GLEVBQUVFLFdBQVksS0FHcEZDLEVBQWMsU0FBc0IxQixHQUNwQzJCLFFBQVFDLElBQUkiLCJmaWxlIjoiMTg1Lm1haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2ZvbGRlckFycmF5fSBmcm9tIFwiLi9mb2xkZXJMb2dpYy5qc1wiO1xuXG5sZXQgbmV3Rm9sZGVyID0gKGZ1bmN0aW9uIG5ld0xpc3QoZm9sZGVyRGlzcGxheSkge1xuICAgIGxldCBsaSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaVwiKTtcbiAgICBsZXQgZm9sZGVyVGV4dCA9IGZvbGRlckFycmF5W2ZvbGRlckFycmF5Lmxlbmd0aCAtMV0uZm9sZGVyO1xuICAgIFxuICAgIGZvbGRlckRpc3BsYXkuYXBwZW5kQ2hpbGQobGkpO1xuICAgIGxpLmlubmVyVGV4dCA9IGZvbGRlclRleHQ7XG4gICAgbGkuY2xhc3NMaXN0LmFkZChcImZvbGRlcnNcIik7XG4gICAgbGkuZGF0YXNldC5pbmRleE51bWJlciA9IGZvbGRlckFycmF5Lmxlbmd0aC0xO1xufSk7XG5sZXQgc3RvcmVJbmRleCA9IG51bGw7XG5sZXQgbWVudSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibWVudVwiKTtcbmxldCBzdHlsZUhpZ2hsaWdodGVkRm9sZGVyID0gKGZ1bmN0aW9uIHN0eWxlSGlnaGxpZ2h0ZWRGb2xkZXIgKHRhcmdldCkge1xuICAgIGxldCBhbGxJdGVtcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuZm9sZGVyc1wiKTtcbiAgICBhbGxJdGVtcy5mb3JFYWNoKGl0ZW0gPT4gaXRlbS5jbGFzc0xpc3QucmVtb3ZlKFwiaGlnaGxpZ2h0XCIpKTtcbiAgICB0YXJnZXQuY2xhc3NMaXN0LmFkZChcImhpZ2hsaWdodFwiKTtcbiAgICBzdG9yZUluZGV4ID0gdGFyZ2V0O1xufSk7XG5cbmxldCBkZWxGcm9tTGlzdCA9IChmdW5jdGlvbiBkZWxGcm9tTGlzdChpdGVtKSB7XG4gICAgc3RvcmVJbmRleC5yZW1vdmUoKTtcbiAgICBtZW51LmNsYXNzTGlzdC5yZW1vdmUoXCJhY3RpdmVcIik7XG59KTtcblxubGV0IHJpZ2h0Q2xpY2tIYW5kbGVyID0gKGZ1bmN0aW9uIHJpZ2h0Q2xpY2tIYW5kbGVyKGV2ZW50KSB7XG4gICAgICAgIG1lbnUuc3R5bGUudG9wID0gZXZlbnQuY2xpZW50WSArIDEwICsgXCJweFwiO1xuICAgICAgICBtZW51LnN0eWxlLmxlZnQgPSBldmVudC5jbGllbnRYICsgMTAgKyBcInB4XCI7XG4gICAgICAgIG1lbnUuY2xhc3NMaXN0LmFkZChcImFjdGl2ZVwiKTtcbn0pO1xuXG5cblxuZXhwb3J0IHtuZXdGb2xkZXIsIHN0eWxlSGlnaGxpZ2h0ZWRGb2xkZXIsIGRlbEZyb21MaXN0LCByaWdodENsaWNrSGFuZGxlcn0iLCJsZXQgZm9sZGVyQXJyYXkgPSBbXTtcblxubGV0IGNyZWF0ZUZvbGRlck9iaiA9IGZ1bmN0aW9uIGNyZWF0ZUZvbGRlck9iaihmb2xkZXJOYW1lKSB7XG4gICAgbGV0IG5ld09iaiA9IHt9O1xuICAgIG5ld09ialtcImZvbGRlclwiXSA9IGZvbGRlck5hbWUudmFsdWU7XG4gICAgbmV3T2JqW1wiaW5kZXhcIl0gPSBmb2xkZXJBcnJheS5sZW5ndGg7XG4gICAgbmV3T2JqW1wiaGlnaGxpZ2h0XCJdID0gZmFsc2U7XG4gICAgcmV0dXJuIChuZXdPYmopO1xufVxuXG5sZXQgcHVzaFRvRm9sZGVyQXJyYXkgPSBmdW5jdGlvbiBwdXNoVG9Gb2xkZXJBcnJheShmb2xkZXJOYW1lKSB7XG4gICAgZm9sZGVyQXJyYXkucHVzaChjcmVhdGVGb2xkZXJPYmooZm9sZGVyTmFtZSkpO1xuICAgIHJldHVybiBmb2xkZXJBcnJheTsgIFxufVxuXG5sZXQgaGlnaGxpZ2h0VHJ1ZSA9IGZ1bmN0aW9uIGhpZ2hsaWdodFRydWUoaW5kZXgpIHtcbiAgICBmb2xkZXJBcnJheS5tYXAoeCA9PiB4LmluZGV4ID09PSBOdW1iZXIoaW5kZXgpID8geC5oaWdobGlnaHQgPSB0cnVlIDogeC5oaWdobGlnaHQgPSBmYWxzZSk7XG59O1xuXG5sZXQgZGVsTGlzdEl0ZW0gPSAoZnVuY3Rpb24gZGVsTGlzdEl0ZW0odGFyZ2V0KSB7XG4gICAgY29uc29sZS5sb2coXCJJIG0gd29ya2luZyBoZWVlcmVcIik7XG4gICAgLyogbGV0IGhpZ2hsaWdodGVkID0gZm9sZGVyQXJyYXkuZmluZEluZGV4KCk7XG4gICAgY29uc29sZS5sb2coaGlnaGxpZ2h0ZWQpO1xuICAgIGNvbnNvbGUubG9nKGZvbGRlckFycmF5KTsgKi9cblxuICAgIC8qbGV0IGlzSGlnaGxpZ2h0ZWQgPSBmb2xkZXJBcnJheS5maW5kKHggPT4geC5oaWdobGlnaHQgPT09IHRydWUpO1xuICAgIGZvbGRlckFycmF5LnNwbGljZShpc0hpZ2hsaWdodGVkWzBdLmluZGV4LCAxKTtcbiAgICBjb25zb2xlLmxvZyhmb2xkZXJBcnJheSk7Ki9cbn0pO1xuXG5cbi8qbGV0IGRlbGV0ZUZvbGRlciA9IChmdW5jdGlvbiBkZWxldGVGb2xkZXIoZXZlbnQpIHtcbiAgICBsZXQgaXNIaWdobGlnaHRlZCA9IGZvbGRlckFycmF5LmZpbHRlcih4ID0+IHguaW5kZXggPT09IE51bWJlcihldmVudC50YXJnZXQuZGF0YXNldC5pbmRleE51bWJlcikpWzBdLmhpZ2hsaWdodDtcbiAgICBpZiAoaXNIaWdobGlnaHRlZCA9PT0gdHJ1ZSkge1xuICAgICAgICBjb25zb2xlLmxvZyhcInRydWVcIik7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJmYWxzZVwiKTtcbiAgICB9XG4gICAgXG4gICAgLypcbiAgICB0aGlzIGNvdWxkIGJlIGhlbHBmdWwgZm9yIGRlbGV0aW5nIGFuZCBhZGRpbmcgbmV3IEVudHJ5c1xuICAgIGltcG9ydChcIi4vZm9sZGVyTG9naWMuanNcIikudGhlbihuZXdGb2xkZXIgPT4ge1xuICAgICAgIGxldCBhID0gbmV3Rm9sZGVyLmZvbGRlckFycmF5LmZpbHRlcihlbGVtZW50ID0+IGVsZW1lbnQuZm9sZGVyID09PSBcInRlc3RcIik7XG4gICAgICAgY29uc29sZS5sb2coYSk7XG4gICAgICAgYVswXS5rID0gXCJrXCJcbiAgICAgICB9KTtcblxufSk7Ki9cblxuZXhwb3J0IHtwdXNoVG9Gb2xkZXJBcnJheSwgZm9sZGVyQXJyYXksIGhpZ2hsaWdodFRydWUsIGRlbExpc3RJdGVtfTsiXSwic291cmNlUm9vdCI6IiJ9