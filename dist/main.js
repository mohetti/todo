(()=>{"use strict";var e,t,r={256:(e,t,r)=>{r.r(t),r.d(t,{pushToFolderArray:()=>o,folderArray:()=>n,highlightTrue:()=>i,delListItem:()=>l});let n=[],o=function(e){return n.push(function(e){let t={};return t.folder=e.value,t.highlight=!1,t}(e)),n},i=function(e){return n.map((t=>t.folder===e?t.highlight=!0:t.highlight=!1)),n},l=function(){let e=n.findIndex((e=>!0===e.highlight));return n.splice(e,1),n}}},n={};function o(e){if(n[e])return n[e].exports;var t=n[e]={exports:{}};return r[e](t,t.exports,o),t.exports}o.m=r,o.d=(e,t)=>{for(var r in t)o.o(t,r)&&!o.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},o.f={},o.e=e=>Promise.all(Object.keys(o.f).reduce(((t,r)=>(o.f[r](e,t),t)),[])),o.u=e=>e+".main.js",o.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),e={},t="todo:",o.l=(r,n,i,l)=>{if(e[r])e[r].push(n);else{var a,d;if(void 0!==i)for(var u=document.getElementsByTagName("script"),c=0;c<u.length;c++){var s=u[c];if(s.getAttribute("src")==r||s.getAttribute("data-webpack")==t+i){a=s;break}}a||(d=!0,(a=document.createElement("script")).charset="utf-8",a.timeout=120,o.nc&&a.setAttribute("nonce",o.nc),a.setAttribute("data-webpack",t+i),a.src=r),e[r]=[n];var h=(t,n)=>{a.onerror=a.onload=null,clearTimeout(f);var o=e[r];if(delete e[r],a.parentNode&&a.parentNode.removeChild(a),o&&o.forEach((e=>e(n))),t)return t(n)},f=setTimeout(h.bind(null,void 0,{type:"timeout",target:a}),12e4);a.onerror=h.bind(null,a.onerror),a.onload=h.bind(null,a.onload),d&&document.head.appendChild(a)}},o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e;o.g.importScripts&&(e=o.g.location+"");var t=o.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");r.length&&(e=r[r.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),o.p=e})(),(()=>{var e={179:0};o.f.j=(t,r)=>{var n=o.o(e,t)?e[t]:void 0;if(0!==n)if(n)r.push(n[2]);else{var i=new Promise(((r,o)=>{n=e[t]=[r,o]}));r.push(n[2]=i);var l=o.p+o.u(t),a=new Error;o.l(l,(r=>{if(o.o(e,t)&&(0!==(n=e[t])&&(e[t]=void 0),n)){var i=r&&("load"===r.type?"missing":r.type),l=r&&r.target&&r.target.src;a.message="Loading chunk "+t+" failed.\n("+i+": "+l+")",a.name="ChunkLoadError",a.type=i,a.request=l,n[1](a)}}),"chunk-"+t,t)}};var t=(t,r)=>{for(var n,i,[l,a,d]=r,u=0,c=[];u<l.length;u++)i=l[u],o.o(e,i)&&e[i]&&c.push(e[i][0]),e[i]=0;for(n in a)o.o(a,n)&&(o.m[n]=a[n]);for(d&&d(o),t&&t(r);c.length;)c.shift()()},r=self.webpackChunktodo=self.webpackChunktodo||[];r.forEach(t.bind(null,0)),r.push=t.bind(null,r.push.bind(r))})(),(()=>{var e=o(256);let t=document.getElementById("new-folder"),r=document.getElementById("folder-ul");document.querySelector("#add-new-btn").addEventListener("click",(function(){-1!==e.folderArray.findIndex((e=>e.folder===t.value))&&0!==e.folderArray.length||(Promise.resolve().then(o.bind(o,256)).then((e=>{e.pushToFolderArray(t)})),o.e(185).then(o.bind(o,185)).then((e=>{e.newFolder(r)})))}));let n=document.querySelector("#folder-ul");n.addEventListener("click",(function(e){if(console.log(e.target),"folder-ul"!==e.target.id){let t=e.target.innerText;Promise.resolve().then(o.bind(o,256)).then((e=>{e.highlightTrue(t)})),o.e(185).then(o.bind(o,185)).then((t=>{t.styleHighlightedFolder(e.target)}))}})),n.addEventListener("contextmenu",(function(e){e.preventDefault(),e.target.classList.contains("highlight")&&o.e(185).then(o.bind(o,185)).then((t=>{t.rightClickHandler(e)}))})),window.addEventListener("click",(function(e){"right-click-item"===e.target.classList[0]?(o.e(185).then(o.bind(o,185)).then((e=>{e.delFromList()})),Promise.resolve().then(o.bind(o,256)).then((e=>{e.delListItem()}))):document.getElementById("menu").classList.remove("active")}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,