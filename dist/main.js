(()=>{"use strict";var e,t,r={},n={};function o(e){if(n[e])return n[e].exports;var t=n[e]={exports:{}};return r[e](t,t.exports,o),t.exports}o.m=r,o.d=(e,t)=>{for(var r in t)o.o(t,r)&&!o.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},o.f={},o.e=e=>Promise.all(Object.keys(o.f).reduce(((t,r)=>(o.f[r](e,t),t)),[])),o.u=e=>e+".main.js",o.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),e={},t="todo:",o.l=(r,n,i,a)=>{if(e[r])e[r].push(n);else{var l,d;if(void 0!==i)for(var c=document.getElementsByTagName("script"),u=0;u<c.length;u++){var s=c[u];if(s.getAttribute("src")==r||s.getAttribute("data-webpack")==t+i){l=s;break}}l||(d=!0,(l=document.createElement("script")).charset="utf-8",l.timeout=120,o.nc&&l.setAttribute("nonce",o.nc),l.setAttribute("data-webpack",t+i),l.src=r),e[r]=[n];var h=(t,n)=>{l.onerror=l.onload=null,clearTimeout(p);var o=e[r];if(delete e[r],l.parentNode&&l.parentNode.removeChild(l),o&&o.forEach((e=>e(n))),t)return t(n)},p=setTimeout(h.bind(null,void 0,{type:"timeout",target:l}),12e4);l.onerror=h.bind(null,l.onerror),l.onload=h.bind(null,l.onload),d&&document.head.appendChild(l)}},o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e;o.g.importScripts&&(e=o.g.location+"");var t=o.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");r.length&&(e=r[r.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),o.p=e})(),(()=>{var e={179:0};o.f.j=(t,r)=>{var n=o.o(e,t)?e[t]:void 0;if(0!==n)if(n)r.push(n[2]);else{var i=new Promise(((r,o)=>{n=e[t]=[r,o]}));r.push(n[2]=i);var a=o.p+o.u(t),l=new Error;o.l(a,(r=>{if(o.o(e,t)&&(0!==(n=e[t])&&(e[t]=void 0),n)){var i=r&&("load"===r.type?"missing":r.type),a=r&&r.target&&r.target.src;l.message="Loading chunk "+t+" failed.\n("+i+": "+a+")",l.name="ChunkLoadError",l.type=i,l.request=a,n[1](l)}}),"chunk-"+t,t)}};var t=(t,r)=>{for(var n,i,[a,l,d]=r,c=0,u=[];c<a.length;c++)i=a[c],o.o(e,i)&&e[i]&&u.push(e[i][0]),e[i]=0;for(n in l)o.o(l,n)&&(o.m[n]=l[n]);for(d&&d(o),t&&t(r);u.length;)u.shift()()},r=self.webpackChunktodo=self.webpackChunktodo||[];r.forEach(t.bind(null,0)),r.push=t.bind(null,r.push.bind(r))})();let i=document.getElementById("new-folder"),a=document.getElementById("folder-ul");document.querySelector("#add-new-btn").addEventListener("click",(function(){o.e(256).then(o.bind(o,256)).then((e=>{e.pushToFolderArray(i)})),o.e(185).then(o.bind(o,185)).then((e=>{e.newFolder(a)}))}));let l=document.querySelector("#folder-ul");l.addEventListener("click",(function(e){let t=e.target.dataset.indexNumber;o.e(256).then(o.bind(o,256)).then((e=>{e.highlightTrue(t)})),o.e(185).then(o.bind(o,185)).then((t=>{t.styleHighlightedFolder(e.target)}))})),l.addEventListener("contextmenu",(function(e){e.preventDefault(),e.target.classList.contains("highlight")&&o.e(185).then(o.bind(o,185)).then((t=>{t.rightClickHandler(e)}))})),window.addEventListener("click",(function(e){"right-click-item"===e.target.classList[0]?function(e){o.e(185).then(o.bind(o,185)).then((t=>{t.delFromList(e.target)})),o.e(256).then(o.bind(o,256)).then((t=>{t.delListItem(e.target)}))}(e):document.getElementById("menu").classList.remove("active")}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,