(()=>{"use strict";var e,t,n={71:(e,t,n)=>{n.r(t),n.d(t,{openModal:()=>p,closeModal:()=>m,submitTask:()=>v,setDefault:()=>f,taskTitle:()=>a,taskDescr:()=>l,taskDate:()=>h,prioHigh:()=>d,prioLow:()=>c,prioMed:()=>s,taskNotes:()=>u});var r=n(256);let i,o,a=document.querySelector("#task-title"),l=document.querySelector("#task-descr"),d=document.querySelector("#high"),s=document.querySelector("#medium"),c=document.querySelector("#low"),u=document.querySelector("#task-notes"),h=document.querySelector("#task-date"),f=function(){g.classList.remove("bg-active"),a.value="",l.value="",d.checked=!1,s.checked=!1,c.checked=!1,u.value="",h.value=""},g=document.querySelector(".modal-bg"),p=function(e,t){if(!0===e)return o=t,i=e,g.classList.add("bg-active"),o;-1!==r.folderArray.findIndex((e=>!0===e.highlight))&&(f(),g.classList.add("bg-active"))},m=function(){return f(),i=!1,o=!1,o},v=function(){let e=r.folderArray[r.folderArray.findIndex((e=>!0===e.highlight))];return-1!==e.tasks.findIndex((e=>e.title===a.value))&&!0!==i?alert("You already have a task with this title."):""===a.value?alert("Please enter a title"):!1===d.checked&&!1===s.checked&&!1===c.checked?alert("Please choose a priority"):void(!0===i?(n.e(152).then(n.bind(n,152)).then((t=>{t.updateTask(e,o)})),i=!1):n.e(152).then(n.bind(n,152)).then((t=>{t.appendTaskToFolder(e)})))}},256:(e,t,n)=>{n.r(t),n.d(t,{pushToFolderArray:()=>o,folderArray:()=>i,highlightTrue:()=>a,delListItem:()=>l});var r=n(158);let i=[],o=function(e){return i.push(function(e){let t={};return t.folder=e.value,t.highlight=!1,t.tasks=[],t}(e)),(0,r.q)(),i},a=function(e){return i.map((t=>t.folder===e?t.highlight=!0:t.highlight=!1)),(0,r.q)(),i},l=function(){let e=i.findIndex((e=>!0===e.highlight));return i.splice(e,1),(0,r.q)(),i}},158:(e,t,n)=>{n.d(t,{q:()=>i,$:()=>o});var r=n(256);let i=function(){window.localStorage.clear(),localStorage.setItem("containerArray",JSON.stringify(r.folderArray))},o=function(){let e=localStorage.getItem("containerArray"),t=JSON.parse(e);!function(e){let t=document.getElementById("folder-ul");for(let n=0;n<e.length;n++){let r=document.createElement("li");t.appendChild(r),r.innerText=e[n].folder,r.classList.add("folders")}}(t),function(e){for(let t=0;t<e.length;t++)r.folderArray.push(e[t])}(t)}}},r={};function i(e){if(r[e])return r[e].exports;var t=r[e]={exports:{}};return n[e](t,t.exports,i),t.exports}i.m=n,i.d=(e,t)=>{for(var n in t)i.o(t,n)&&!i.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},i.f={},i.e=e=>Promise.all(Object.keys(i.f).reduce(((t,n)=>(i.f[n](e,t),t)),[])),i.u=e=>e+".main.js",i.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),i.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),e={},t="todo:",i.l=(n,r,o,a)=>{if(e[n])e[n].push(r);else{var l,d;if(void 0!==o)for(var s=document.getElementsByTagName("script"),c=0;c<s.length;c++){var u=s[c];if(u.getAttribute("src")==n||u.getAttribute("data-webpack")==t+o){l=u;break}}l||(d=!0,(l=document.createElement("script")).charset="utf-8",l.timeout=120,i.nc&&l.setAttribute("nonce",i.nc),l.setAttribute("data-webpack",t+o),l.src=n),e[n]=[r];var h=(t,r)=>{l.onerror=l.onload=null,clearTimeout(f);var i=e[n];if(delete e[n],l.parentNode&&l.parentNode.removeChild(l),i&&i.forEach((e=>e(r))),t)return t(r)},f=setTimeout(h.bind(null,void 0,{type:"timeout",target:l}),12e4);l.onerror=h.bind(null,l.onerror),l.onload=h.bind(null,l.onload),d&&document.head.appendChild(l)}},i.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e;i.g.importScripts&&(e=i.g.location+"");var t=i.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var n=t.getElementsByTagName("script");n.length&&(e=n[n.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),i.p=e})(),(()=>{var e={179:0};i.f.j=(t,n)=>{var r=i.o(e,t)?e[t]:void 0;if(0!==r)if(r)n.push(r[2]);else{var o=new Promise(((n,i)=>{r=e[t]=[n,i]}));n.push(r[2]=o);var a=i.p+i.u(t),l=new Error;i.l(a,(n=>{if(i.o(e,t)&&(0!==(r=e[t])&&(e[t]=void 0),r)){var o=n&&("load"===n.type?"missing":n.type),a=n&&n.target&&n.target.src;l.message="Loading chunk "+t+" failed.\n("+o+": "+a+")",l.name="ChunkLoadError",l.type=o,l.request=a,r[1](l)}}),"chunk-"+t,t)}};var t=(t,n)=>{for(var r,o,[a,l,d]=n,s=0,c=[];s<a.length;s++)o=a[s],i.o(e,o)&&e[o]&&c.push(e[o][0]),e[o]=0;for(r in l)i.o(l,r)&&(i.m[r]=l[r]);for(d&&d(i),t&&t(n);c.length;)c.shift()()},n=self.webpackChunktodo=self.webpackChunktodo||[];n.forEach(t.bind(null,0)),n.push=t.bind(null,n.push.bind(n))})(),(()=>{var e=i(158),t=i(256);let n,r=document.getElementById("new-folder"),o=document.getElementById("folder-ul"),a=document.getElementById("task-menu");var l=i(71);0!==window.localStorage.length&&(0,e.$)(),document.querySelector("#add-new-btn").addEventListener("click",(function(){let e=t.folderArray.findIndex((e=>e.folder===r.value));""!==r.value&&(-1!==e&&0!==t.folderArray.length||(Promise.resolve().then(i.bind(i,256)).then((e=>{e.pushToFolderArray(r)})),i.e(185).then(i.bind(i,185)).then((e=>{e.newFolder(o,r)}))))}));let d=document.querySelector("#folder-ul");d.addEventListener("click",(function(e){if("folder-ul"!==e.target.id){let t=e.target.innerText;Promise.resolve().then(i.bind(i,256)).then((e=>{e.highlightTrue(t)})),i.e(185).then(i.bind(i,185)).then((t=>{t.styleHighlightedFolder(e.target)})),i.e(520).then(i.bind(i,520)).then((e=>{e.displayTasks()})),i.e(185).then(i.bind(i,185)).then((e=>{e.showModal()}))}})),d.addEventListener("contextmenu",(function(e){e.preventDefault(),e.target.classList.contains("highlight")&&i.e(185).then(i.bind(i,185)).then((t=>{t.rightClickHandler(e)}))})),window.addEventListener("click",(function(e){"right-click-item"===e.target.classList[0]?(i.e(185).then(i.bind(i,185)).then((e=>{e.delFromList()})),Promise.resolve().then(i.bind(i,256)).then((e=>{e.delListItem()}))):document.getElementById("menu").classList.remove("active")})),window.addEventListener("contextmenu",(function(e){if(e.target.classList.contains("task-display"))return n=e.target,e.preventDefault(),a.style.top=e.clientY+10+"px",a.style.left=e.clientX+10+"px",a.classList.add("active"),n;e.target.parentNode.classList.contains("task-display")&&e.preventDefault()})),document.querySelector(".open-modal").addEventListener("click",l.openModal),document.querySelector(".modal-close").addEventListener("click",l.closeModal),document.querySelector("#task-subm").addEventListener("click",l.submitTask),document.querySelector("#body").addEventListener("click",(function(e){if("body"!==e.target.id)if("task-delete"===e.target.id)i.e(520).then(i.bind(i,520)).then((t=>{t.deleteTaskDom(e)})),i.e(152).then(i.bind(i,152)).then((t=>{t.deleteTask(e)}));else if(e.target.classList.contains("task-display")||e.target.parentElement.classList.contains("task-display")){let t;t=""===e.target.firstChild.innerText?e.target.childNodes[1].firstChild.nodeValue:e.target.parentNode.childNodes[1].innerText,i.e(520).then(i.bind(i,520)).then((e=>{e.openTask(t)})),i.e(185).then(i.bind(i,185)).then((e=>{e.closeModal()}))}else if("note-delete"===e.target.id)i.e(152).then(i.bind(i,152)).then((t=>{t.deleteNote(e)})),i.e(520).then(i.bind(i,520)).then((t=>{t.deleteNoteFromDisplay(e)}));else if("note-container"===e.target.parentNode.className)i.e(520).then(i.bind(i,520)).then((t=>{t.strikeThrough(e)}));else if("go-back"===e.target.id||"go-back-icon"===e.target.id)i.e(520).then(i.bind(i,520)).then((e=>{e.displayTasks()})),i.e(185).then(i.bind(i,185)).then((e=>{e.showModal()}));else if("del-task"===e.target.id||"del-task-icon"===e.target.id){let t=e.target.parentNode.dataset.parent;i.e(520).then(i.bind(i,520)).then((e=>{e.displayTasks()})),i.e(185).then(i.bind(i,185)).then((e=>{e.showModal()})),i.e(520).then(i.bind(i,520)).then((e=>{e.deleteAll(t)})),i.e(152).then(i.bind(i,152)).then((e=>{e.deleteAllInArray(t)}))}})),window.addEventListener("click",(function(e){if(e.target.classList.contains("right-click")){let e=!0,t=n.childNodes[1].innerText;Promise.resolve().then(i.bind(i,71)).then((n=>{n.openModal(e,t),a.classList.remove("active")}))}else{if(!a.classList.contains("active"))return;a.classList.remove("active")}}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90b2RvL3dlYnBhY2svcnVudGltZS9sb2FkIHNjcmlwdCIsIndlYnBhY2s6Ly90b2RvLy4vc3JjL2V2ZW50TGlzdGVuZXJzTW9kYWwuanMiLCJ3ZWJwYWNrOi8vdG9kby8uL3NyYy9mb2xkZXJMb2dpYy5qcyIsIndlYnBhY2s6Ly90b2RvLy4vc3JjL2xvY2FsU3RvcmFnZS5qcyIsIndlYnBhY2s6Ly90b2RvL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL3RvZG8vd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL3RvZG8vd2VicGFjay9ydW50aW1lL2Vuc3VyZSBjaHVuayIsIndlYnBhY2s6Ly90b2RvL3dlYnBhY2svcnVudGltZS9nZXQgamF2YXNjcmlwdCBjaHVuayBmaWxlbmFtZSIsIndlYnBhY2s6Ly90b2RvL3dlYnBhY2svcnVudGltZS9nbG9iYWwiLCJ3ZWJwYWNrOi8vdG9kby93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL3RvZG8vd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly90b2RvL3dlYnBhY2svcnVudGltZS9wdWJsaWNQYXRoIiwid2VicGFjazovL3RvZG8vd2VicGFjay9ydW50aW1lL2pzb25wIGNodW5rIGxvYWRpbmciLCJ3ZWJwYWNrOi8vdG9kby8uL3NyYy9ldmVudExpc3RlbmVycy5qcyIsIndlYnBhY2s6Ly90b2RvLy4vc3JjL2luZGV4LmpzIl0sIm5hbWVzIjpbImluUHJvZ3Jlc3MiLCJkYXRhV2VicGFja1ByZWZpeCIsInVwZGF0ZUFycmF5IiwicmVmQXJyYXkiLCJ0YXNrVGl0bGUiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJ0YXNrRGVzY3IiLCJwcmlvSGlnaCIsInByaW9NZWQiLCJwcmlvTG93IiwidGFza05vdGVzIiwidGFza0RhdGUiLCJzZXREZWZhdWx0IiwibW9kYWxCZyIsImNsYXNzTGlzdCIsInJlbW92ZSIsInZhbHVlIiwiY2hlY2tlZCIsIm9wZW5Nb2RhbCIsInVwZGF0ZSIsInJlZmVyZW5jZSIsImFkZCIsImZvbGRlckFycmF5IiwieCIsImhpZ2hsaWdodCIsImNsb3NlTW9kYWwiLCJzdWJtaXRUYXNrIiwiYXBwZW5kVG8iLCJ0YXNrcyIsImZpbmRJbmRleCIsInRpdGxlIiwiYWxlcnQiLCJ0aGVuIiwidXBkYXRlVGFzayIsImFwcGVuZCIsImFwcGVuZFRhc2tUb0ZvbGRlciIsInB1c2hUb0ZvbGRlckFycmF5IiwiZm9sZGVyTmFtZSIsInB1c2giLCJuZXdPYmoiLCJjcmVhdGVGb2xkZXJPYmoiLCJoaWdobGlnaHRUcnVlIiwiaW5uZXJUZXh0IiwibWFwIiwiZm9sZGVyIiwiZGVsTGlzdEl0ZW0iLCJhcnJheUluZGV4Iiwic3BsaWNlIiwic2V0TG9jYWxTdG9yYWdlIiwid2luZG93IiwibG9jYWxTdG9yYWdlIiwiY2xlYXIiLCJzZXRJdGVtIiwiSlNPTiIsInN0cmluZ2lmeSIsImdldExvY2FsU3RvcmFnZSIsInN0b3JhZ2VBcnJheSIsImdldEl0ZW0iLCJnZXRBcnJheSIsInBhcnNlIiwiYXJyYXkiLCJmb2xkZXJEaXNwbGF5IiwiZ2V0RWxlbWVudEJ5SWQiLCJpIiwibGVuZ3RoIiwibGkiLCJjcmVhdGVFbGVtZW50IiwiYXBwZW5kQ2hpbGQiLCJwb3B1bGF0ZUZvbGRlciIsInBvcHVsYXRlQXJyYXkiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsIm0iLCJkIiwiZGVmaW5pdGlvbiIsImtleSIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJmIiwiZSIsImNodW5rSWQiLCJQcm9taXNlIiwiYWxsIiwia2V5cyIsInJlZHVjZSIsInByb21pc2VzIiwidSIsImciLCJnbG9iYWxUaGlzIiwidGhpcyIsIkZ1bmN0aW9uIiwib2JqIiwicHJvcCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImwiLCJ1cmwiLCJkb25lIiwic2NyaXB0IiwibmVlZEF0dGFjaCIsInVuZGVmaW5lZCIsInNjcmlwdHMiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInMiLCJnZXRBdHRyaWJ1dGUiLCJjaGFyc2V0IiwidGltZW91dCIsIm5jIiwic2V0QXR0cmlidXRlIiwic3JjIiwib25TY3JpcHRDb21wbGV0ZSIsInByZXYiLCJldmVudCIsIm9uZXJyb3IiLCJvbmxvYWQiLCJjbGVhclRpbWVvdXQiLCJkb25lRm5zIiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwiZm9yRWFjaCIsImZuIiwic2V0VGltZW91dCIsImJpbmQiLCJ0eXBlIiwidGFyZ2V0IiwiaGVhZCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInNjcmlwdFVybCIsImltcG9ydFNjcmlwdHMiLCJsb2NhdGlvbiIsImN1cnJlbnRTY3JpcHQiLCJFcnJvciIsInJlcGxhY2UiLCJwIiwiaW5zdGFsbGVkQ2h1bmtzIiwiMTc5IiwiaiIsImluc3RhbGxlZENodW5rRGF0YSIsInByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiZXJyb3IiLCJlcnJvclR5cGUiLCJyZWFsU3JjIiwibWVzc2FnZSIsIm5hbWUiLCJyZXF1ZXN0Iiwid2VicGFja0pzb25wQ2FsbGJhY2siLCJwYXJlbnRDaHVua0xvYWRpbmdGdW5jdGlvbiIsImRhdGEiLCJjaHVua0lkcyIsIm1vcmVNb2R1bGVzIiwicnVudGltZSIsInJlc29sdmVzIiwic2hpZnQiLCJjaHVua0xvYWRpbmdHbG9iYWwiLCJzZWxmIiwic3RvcmVkVGFzayIsInRhc2tNZW51IiwiYWRkRXZlbnRMaXN0ZW5lciIsImR1cGxpY2F0ZXNUcnVlIiwibmV3Rm9sZGVyIiwibmV3RW50cnkiLCJmb2xkZXJBY3Rpb25zIiwiaWQiLCJoaWdobGlnaHRpbmciLCJoaWdobGlnaHRDU1MiLCJzdHlsZUhpZ2hsaWdodGVkRm9sZGVyIiwiZGlzcGxheSIsImRpc3BsYXlUYXNrcyIsInNob3dNb2RhbCIsInByZXZlbnREZWZhdWx0IiwiY29udGFpbnMiLCJyaWdodENsaWNrIiwicmlnaHRDbGlja0hhbmRsZXIiLCJkZWxJdGVtIiwiZGVsRnJvbUxpc3QiLCJzdHlsZSIsInRvcCIsImNsaWVudFkiLCJsZWZ0IiwiY2xpZW50WCIsImRlbFRhc2siLCJkZWxldGVUYXNrRG9tIiwiZGVsZXRlVGFzayIsInBhcmVudEVsZW1lbnQiLCJzZWFyY2hUZXJtIiwiZmlyc3RDaGlsZCIsImNoaWxkTm9kZXMiLCJub2RlVmFsdWUiLCJvcGVuIiwib3BlblRhc2siLCJjbG9zZSIsImRlbE5vdGUiLCJkZWxldGVOb3RlIiwiZGVsZXRlTm90ZUZyb21EaXNwbGF5IiwiY2xhc3NOYW1lIiwic3RyaWtlIiwic3RyaWtlVGhyb3VnaCIsImRlbGV0ZWRUYXNrIiwiZGF0YXNldCIsInBhcmVudCIsImRlbGV0ZUFsbCIsImRlbGV0ZUFsbEluQXJyYXkiLCJtb2RhbCJdLCJtYXBwaW5ncyI6InVCQUFJQSxFQUNBQyxFLDBOQ0FKLElBcUJJQyxFQUNBQyxFQXRCQUMsRUFBWUMsU0FBU0MsY0FBYyxlQUNuQ0MsRUFBWUYsU0FBU0MsY0FBYyxlQUNuQ0UsRUFBV0gsU0FBU0MsY0FBYyxTQUNsQ0csRUFBVUosU0FBU0MsY0FBYyxXQUNqQ0ksRUFBVUwsU0FBU0MsY0FBYyxRQUNqQ0ssRUFBWU4sU0FBU0MsY0FBYyxlQUNuQ00sRUFBV1AsU0FBU0MsY0FBYyxjQUdsQ08sRUFBYSxXQUNiQyxFQUFRQyxVQUFVQyxPQUFPLGFBQ3pCWixFQUFVYSxNQUFRLEdBQ2xCVixFQUFVVSxNQUFRLEdBQ2xCVCxFQUFTVSxTQUFVLEVBQ25CVCxFQUFRUyxTQUFVLEVBQ2xCUixFQUFRUSxTQUFVLEVBQ2xCUCxFQUFVTSxNQUFRLEdBQ2xCTCxFQUFTSyxNQUFRLElBTWpCSCxFQUFVVCxTQUFTQyxjQUFjLGFBQ2pDYSxFQUFZLFNBQW9CQyxF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QyxHQUNyRCw2QkFBd0I5SSxNQUFLa0osSUFDekJBLEVBQVFDLGtCQUVaLDZCQUEwQm5KLE1BQUtrSixJQUMzQkEsRUFBUUUsb0JBRVQsR0FBd0IsYUFBcEI1RCxFQUFNWSxPQUFPMEMsSUFBeUMsa0JBQXBCdEQsRUFBTVksT0FBTzBDLEdBQXdCLENBQzlFLElBQUltQyxFQUFjekYsRUFBTVksT0FBT1AsV0FBV3FGLFFBQVFDLE9BQ2xELDZCQUF3Qm5MLE1BQUtrSixJQUN6QkEsRUFBUUMsa0JBRVosNkJBQTBCbkosTUFBS2tKLElBQzNCQSxFQUFRRSxlQUVaLDZCQUF3QnBKLE1BQUtnSyxJQUN6QkEsRUFBUW9CLFVBQVVILE1BRXRCLDZCQUFxQmpMLE1BQUtnSyxJQUN0QkEsRUFBUXFCLGlCQUFpQkosVUNsR3JDaEssT0FBT3dILGlCQUFpQixTRGtCUCxTQUFxQmpELEdBQ2xDLEdBQUlBLEVBQU1ZLE9BQU90SCxVQUFVd0ssU0FBUyxlQUFnQixDQUNoRCxJQUFJbkssR0FBUyxFQUNUQyxFQUFZbUosRUFBVytCLFdBQVcsR0FBRzVKLFVBQ3pDLHFDQUFtQ1YsTUFBS3NMLElBQ3BDQSxFQUFNcE0sVUFBVUMsRUFBUUMsR0FDeEJvSixFQUFTMUosVUFBVUMsT0FBTyxpQkFFM0IsS0FBSXlKLEVBQVMxSixVQUFVd0ssU0FBUyxVQUduQyxPQUZBZCxFQUFTMUosVUFBVUMsT0FBTyxlIiwiZmlsZSI6Im1haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgaW5Qcm9ncmVzcyA9IHt9O1xudmFyIGRhdGFXZWJwYWNrUHJlZml4ID0gXCJ0b2RvOlwiO1xuLy8gbG9hZFNjcmlwdCBmdW5jdGlvbiB0byBsb2FkIGEgc2NyaXB0IHZpYSBzY3JpcHQgdGFnXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmwgPSAodXJsLCBkb25lLCBrZXksIGNodW5rSWQpID0+IHtcblx0aWYoaW5Qcm9ncmVzc1t1cmxdKSB7IGluUHJvZ3Jlc3NbdXJsXS5wdXNoKGRvbmUpOyByZXR1cm47IH1cblx0dmFyIHNjcmlwdCwgbmVlZEF0dGFjaDtcblx0aWYoa2V5ICE9PSB1bmRlZmluZWQpIHtcblx0XHR2YXIgc2NyaXB0cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic2NyaXB0XCIpO1xuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCBzY3JpcHRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgcyA9IHNjcmlwdHNbaV07XG5cdFx0XHRpZihzLmdldEF0dHJpYnV0ZShcInNyY1wiKSA9PSB1cmwgfHwgcy5nZXRBdHRyaWJ1dGUoXCJkYXRhLXdlYnBhY2tcIikgPT0gZGF0YVdlYnBhY2tQcmVmaXggKyBrZXkpIHsgc2NyaXB0ID0gczsgYnJlYWs7IH1cblx0XHR9XG5cdH1cblx0aWYoIXNjcmlwdCkge1xuXHRcdG5lZWRBdHRhY2ggPSB0cnVlO1xuXHRcdHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuXG5cdFx0c2NyaXB0LmNoYXJzZXQgPSAndXRmLTgnO1xuXHRcdHNjcmlwdC50aW1lb3V0ID0gMTIwO1xuXHRcdGlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLm5jKSB7XG5cdFx0XHRzY3JpcHQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgX193ZWJwYWNrX3JlcXVpcmVfXy5uYyk7XG5cdFx0fVxuXHRcdHNjcmlwdC5zZXRBdHRyaWJ1dGUoXCJkYXRhLXdlYnBhY2tcIiwgZGF0YVdlYnBhY2tQcmVmaXggKyBrZXkpO1xuXHRcdHNjcmlwdC5zcmMgPSB1cmw7XG5cdH1cblx0aW5Qcm9ncmVzc1t1cmxdID0gW2RvbmVdO1xuXHR2YXIgb25TY3JpcHRDb21wbGV0ZSA9IChwcmV2LCBldmVudCkgPT4ge1xuXHRcdC8vIGF2b2lkIG1lbSBsZWFrcyBpbiBJRS5cblx0XHRzY3JpcHQub25lcnJvciA9IHNjcmlwdC5vbmxvYWQgPSBudWxsO1xuXHRcdGNsZWFyVGltZW91dCh0aW1lb3V0KTtcblx0XHR2YXIgZG9uZUZucyA9IGluUHJvZ3Jlc3NbdXJsXTtcblx0XHRkZWxldGUgaW5Qcm9ncmVzc1t1cmxdO1xuXHRcdHNjcmlwdC5wYXJlbnROb2RlICYmIHNjcmlwdC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHNjcmlwdCk7XG5cdFx0ZG9uZUZucyAmJiBkb25lRm5zLmZvckVhY2goKGZuKSA9PiBmbihldmVudCkpO1xuXHRcdGlmKHByZXYpIHJldHVybiBwcmV2KGV2ZW50KTtcblx0fVxuXHQ7XG5cdHZhciB0aW1lb3V0ID0gc2V0VGltZW91dChvblNjcmlwdENvbXBsZXRlLmJpbmQobnVsbCwgdW5kZWZpbmVkLCB7IHR5cGU6ICd0aW1lb3V0JywgdGFyZ2V0OiBzY3JpcHQgfSksIDEyMDAwMCk7XG5cdHNjcmlwdC5vbmVycm9yID0gb25TY3JpcHRDb21wbGV0ZS5iaW5kKG51bGwsIHNjcmlwdC5vbmVycm9yKTtcblx0c2NyaXB0Lm9ubG9hZCA9IG9uU2NyaXB0Q29tcGxldGUuYmluZChudWxsLCBzY3JpcHQub25sb2FkKTtcblx0bmVlZEF0dGFjaCAmJiBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHNjcmlwdCk7XG59OyIsImltcG9ydCB7Zm9sZGVyQXJyYXl9IGZyb20gXCIuL2ZvbGRlckxvZ2ljLmpzXCI7XG5sZXQgdGFza1RpdGxlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiN0YXNrLXRpdGxlXCIpO1xubGV0IHRhc2tEZXNjciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjdGFzay1kZXNjclwiKTtcbmxldCBwcmlvSGlnaCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjaGlnaFwiKTtcbmxldCBwcmlvTWVkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNtZWRpdW1cIik7XG5sZXQgcHJpb0xvdyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjbG93XCIpO1xubGV0IHRhc2tOb3RlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjdGFzay1ub3Rlc1wiKTtcbmxldCB0YXNrRGF0ZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjdGFzay1kYXRlXCIpO1xuXG5cbmxldCBzZXREZWZhdWx0ID0gKGZ1bmN0aW9uIHNldERlZmF1bHQoKSB7XG4gICAgbW9kYWxCZy5jbGFzc0xpc3QucmVtb3ZlKFwiYmctYWN0aXZlXCIpO1xuICAgIHRhc2tUaXRsZS52YWx1ZSA9IFwiXCI7XG4gICAgdGFza0Rlc2NyLnZhbHVlID0gXCJcIjtcbiAgICBwcmlvSGlnaC5jaGVja2VkID0gZmFsc2U7XG4gICAgcHJpb01lZC5jaGVja2VkID0gZmFsc2U7XG4gICAgcHJpb0xvdy5jaGVja2VkID0gZmFsc2U7XG4gICAgdGFza05vdGVzLnZhbHVlID0gXCJcIjtcbiAgICB0YXNrRGF0ZS52YWx1ZSA9IFwiXCI7XG59KTtcblxuLy8gb3BlbnMgbW9kYWwgdG8gY3JlYXRlIG5ldyB0YXNrXG5sZXQgdXBkYXRlQXJyYXk7XG5sZXQgcmVmQXJyYXk7XG5sZXQgbW9kYWxCZyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubW9kYWwtYmdcIik7XG5sZXQgb3Blbk1vZGFsID0gKGZ1bmN0aW9uIG9wZW5Nb2RhbCh1cGRhdGUsIHJlZmVyZW5jZSkge1xuXG4gICAgXG4gICAgaWYgKHVwZGF0ZSA9PT0gdHJ1ZSkge1xuICAgICAgICByZWZBcnJheSA9IHJlZmVyZW5jZTtcbiAgICAgICAgdXBkYXRlQXJyYXkgPSB1cGRhdGU7XG4gICAgICAgIG1vZGFsQmcuY2xhc3NMaXN0LmFkZChcImJnLWFjdGl2ZVwiKTtcbiAgICAgICAgcmV0dXJuIHVwZGF0ZUFycmF5LCByZWZBcnJheTtcbiAgICB9O1xuICAgIGlmIChmb2xkZXJBcnJheS5maW5kSW5kZXgoeCA9PiB4LmhpZ2hsaWdodCA9PT0gdHJ1ZSkgIT09IC0xKSB7XG4gICAgICAgIHNldERlZmF1bHQoKTtcbiAgICAgICAgbW9kYWxCZy5jbGFzc0xpc3QuYWRkKFwiYmctYWN0aXZlXCIpO1xuICAgIH07XG59KTtcblxuLy8gY2xvc2VzIG1vZGFsXG5sZXQgY2xvc2VNb2RhbCA9IChmdW5jdGlvbiBjbG9zZU1vZGFsKCkge1xuICAgIHNldERlZmF1bHQoKTtcbiAgICB1cGRhdGVBcnJheSA9IGZhbHNlO1xuICAgIHJlZkFycmF5ID0gZmFsc2U7XG4gICAgcmV0dXJuIHVwZGF0ZUFycmF5LCByZWZBcnJheTtcbn0pO1xuLy8gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4vLyBzdWJtaXRzIG5ldyB0YXNrXG5sZXQgc3VibWl0VGFzayA9IChmdW5jdGlvbiBzdWJtaXRUYXNrKCkge1xuICAgIGxldCBhcHBlbmRUbyAgPSBmb2xkZXJBcnJheVtmb2xkZXJBcnJheS5maW5kSW5kZXgoeCA9PiB4LmhpZ2hsaWdodCA9PT0gdHJ1ZSldO1xuICAgIGxldCBkdXBsaWNhdGVUYXNrcyA9IGFwcGVuZFRvLnRhc2tzLmZpbmRJbmRleCh4ID0+IHgudGl0bGUgPT09IHRhc2tUaXRsZS52YWx1ZSk7XG4gICAgaWYgKGR1cGxpY2F0ZVRhc2tzICE9PSAtMSAmJiB1cGRhdGVBcnJheSAhPT0gdHJ1ZSkge1xuICAgICAgICByZXR1cm4gYWxlcnQoXCJZb3UgYWxyZWFkeSBoYXZlIGEgdGFzayB3aXRoIHRoaXMgdGl0bGUuXCIpO1xuICAgIH1cbiAgICBpZiAodGFza1RpdGxlLnZhbHVlID09PSBcIlwiKSB7XG4gICAgICAgIHJldHVybiBhbGVydChcIlBsZWFzZSBlbnRlciBhIHRpdGxlXCIpO1xuICAgIH0gZWxzZSBpZiAocHJpb0hpZ2guY2hlY2tlZCA9PT0gZmFsc2UgJiYgcHJpb01lZC5jaGVja2VkID09PSBmYWxzZSAmJiBwcmlvTG93LmNoZWNrZWQgPT09IGZhbHNlKSB7XG4gICAgICAgIHJldHVybiBhbGVydChcIlBsZWFzZSBjaG9vc2UgYSBwcmlvcml0eVwiKTtcbiAgICB9IGVsc2UgaWYgKHVwZGF0ZUFycmF5ID09PSB0cnVlKSB7XG4gICAgICAgIGltcG9ydChcIi4vdGFza3MuanNcIikudGhlbih1cGRhdGUgPT4ge1xuICAgICAgICAgICAgdXBkYXRlLnVwZGF0ZVRhc2soYXBwZW5kVG8sIHJlZkFycmF5KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHVwZGF0ZUFycmF5ID0gZmFsc2U7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgaW1wb3J0KFwiLi90YXNrcy5qc1wiKS50aGVuKGFwcGVuZCA9PiB7XG4gICAgICAgICAgICBhcHBlbmQuYXBwZW5kVGFza1RvRm9sZGVyKGFwcGVuZFRvKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbn0pO1xuXG5leHBvcnQge29wZW5Nb2RhbCwgY2xvc2VNb2RhbCwgc3VibWl0VGFzaywgc2V0RGVmYXVsdCwgdGFza1RpdGxlLCB0YXNrRGVzY3IsIHRhc2tEYXRlLCBwcmlvSGlnaCwgcHJpb0xvdywgcHJpb01lZCwgdGFza05vdGVzfSIsImxldCBmb2xkZXJBcnJheSA9IFtdO1xuaW1wb3J0IHtzZXRMb2NhbFN0b3JhZ2V9IGZyb20gXCIuL2xvY2FsU3RvcmFnZS5qc1wiO1xubGV0IGNyZWF0ZUZvbGRlck9iaiA9IGZ1bmN0aW9uIGNyZWF0ZUZvbGRlck9iaihmb2xkZXJOYW1lKSB7XG4gICAgbGV0IG5ld09iaiA9IHt9O1xuICAgIG5ld09ialtcImZvbGRlclwiXSA9IGZvbGRlck5hbWUudmFsdWU7XG4gICAgbmV3T2JqW1wiaGlnaGxpZ2h0XCJdID0gZmFsc2U7XG4gICAgbmV3T2JqW1widGFza3NcIl0gPSBbXTtcbiAgICByZXR1cm4gKG5ld09iaik7XG59XG5cbmxldCBwdXNoVG9Gb2xkZXJBcnJheSA9IGZ1bmN0aW9uIHB1c2hUb0ZvbGRlckFycmF5KGZvbGRlck5hbWUpIHtcbiAgICBmb2xkZXJBcnJheS5wdXNoKGNyZWF0ZUZvbGRlck9iaihmb2xkZXJOYW1lKSk7XG4gICAgc2V0TG9jYWxTdG9yYWdlKCk7XG4gICAgcmV0dXJuIGZvbGRlckFycmF5OyAgXG59XG5sZXQgaGlnaGxpZ2h0VHJ1ZSA9IGZ1bmN0aW9uIGhpZ2hsaWdodFRydWUoaW5uZXJUZXh0KSB7XG4gICAgZm9sZGVyQXJyYXkubWFwKCh4KSA9PiAoeC5mb2xkZXIgPT09IGlubmVyVGV4dCA/IHguaGlnaGxpZ2h0ID0gdHJ1ZSA6IHguaGlnaGxpZ2h0ID0gZmFsc2UpKTtcbiAgICBzZXRMb2NhbFN0b3JhZ2UoKTtcbiAgICByZXR1cm4gZm9sZGVyQXJyYXk7XG59O1xubGV0IGRlbExpc3RJdGVtID0gKGZ1bmN0aW9uIGRlbExpc3RJdGVtKCkge1xuICAgIGxldCBhcnJheUluZGV4ID0gZm9sZGVyQXJyYXkuZmluZEluZGV4KHggPT4geC5oaWdobGlnaHQgPT09IHRydWUpO1xuICAgIGZvbGRlckFycmF5LnNwbGljZShhcnJheUluZGV4LCAxKTtcbiAgICBzZXRMb2NhbFN0b3JhZ2UoKTtcbiAgICByZXR1cm4gZm9sZGVyQXJyYXk7XG59KTtcblxuZXhwb3J0IHtwdXNoVG9Gb2xkZXJBcnJheSwgZm9sZGVyQXJyYXksIGhpZ2hsaWdodFRydWUsIGRlbExpc3RJdGVtfTsiLCJpbXBvcnQge2ZvbGRlckFycmF5fSBmcm9tIFwiLi9mb2xkZXJMb2dpYy5qc1wiO1xubGV0IHNldExvY2FsU3RvcmFnZSA9IChmdW5jdGlvbiBzZXRMb2NhbFN0b3JhZ2UoKSB7XG4gICAgd2luZG93LmxvY2FsU3RvcmFnZS5jbGVhcigpO1xuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKFwiY29udGFpbmVyQXJyYXlcIiwgSlNPTi5zdHJpbmdpZnkoZm9sZGVyQXJyYXkpKTtcbn0pO1xuXG5sZXQgcG9wdWxhdGVGb2xkZXIgPSAoZnVuY3Rpb24gcG9wdWxhdGVGb2xkZXIoYXJyYXkpIHtcbiAgICBsZXQgZm9sZGVyRGlzcGxheSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZm9sZGVyLXVsXCIpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGV0IGxpID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpXCIpO1xuICAgICAgICBmb2xkZXJEaXNwbGF5LmFwcGVuZENoaWxkKGxpKTtcbiAgICAgICAgbGkuaW5uZXJUZXh0ID0gYXJyYXlbaV0uZm9sZGVyO1xuICAgICAgICBsaS5jbGFzc0xpc3QuYWRkKFwiZm9sZGVyc1wiKTtcbiAgICB9O1xufSk7XG5cbmxldCBwb3B1bGF0ZUFycmF5ID0gKGZ1bmN0aW9uIHBvcHVsYXRlQXJyYXkoYXJyYXkpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGZvbGRlckFycmF5LnB1c2goYXJyYXlbaV0pO1xuICAgIH07XG59KTtcblxubGV0IGdldExvY2FsU3RvcmFnZSA9IChmdW5jdGlvbiBnZXRMb2NhbFN0b3JhZ2UoKSB7XG4gICAgbGV0IHN0b3JhZ2VBcnJheSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwiY29udGFpbmVyQXJyYXlcIik7XG4gICAgbGV0IGdldEFycmF5ID0gSlNPTi5wYXJzZShzdG9yYWdlQXJyYXkpO1xuICAgIHBvcHVsYXRlRm9sZGVyKGdldEFycmF5KTtcbiAgICBwb3B1bGF0ZUFycmF5KGdldEFycmF5KTtcbn0pO1xuXG5leHBvcnQge3NldExvY2FsU3RvcmFnZSwgZ2V0TG9jYWxTdG9yYWdlfTsiLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHRpZihfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdKSB7XG5cdFx0cmV0dXJuIF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0uZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbi8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBfX3dlYnBhY2tfbW9kdWxlc19fO1xuXG4iLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmYgPSB7fTtcbi8vIFRoaXMgZmlsZSBjb250YWlucyBvbmx5IHRoZSBlbnRyeSBjaHVuay5cbi8vIFRoZSBjaHVuayBsb2FkaW5nIGZ1bmN0aW9uIGZvciBhZGRpdGlvbmFsIGNodW5rc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5lID0gKGNodW5rSWQpID0+IHtcblx0cmV0dXJuIFByb21pc2UuYWxsKE9iamVjdC5rZXlzKF9fd2VicGFja19yZXF1aXJlX18uZikucmVkdWNlKChwcm9taXNlcywga2V5KSA9PiB7XG5cdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5mW2tleV0oY2h1bmtJZCwgcHJvbWlzZXMpO1xuXHRcdHJldHVybiBwcm9taXNlcztcblx0fSwgW10pKTtcbn07IiwiLy8gVGhpcyBmdW5jdGlvbiBhbGxvdyB0byByZWZlcmVuY2UgYXN5bmMgY2h1bmtzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnUgPSAoY2h1bmtJZCkgPT4ge1xuXHQvLyByZXR1cm4gdXJsIGZvciBmaWxlbmFtZXMgYmFzZWQgb24gdGVtcGxhdGVcblx0cmV0dXJuIFwiXCIgKyBjaHVua0lkICsgXCIubWFpbi5qc1wiO1xufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmcgPSAoZnVuY3Rpb24oKSB7XG5cdGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcpIHJldHVybiBnbG9iYWxUaGlzO1xuXHR0cnkge1xuXHRcdHJldHVybiB0aGlzIHx8IG5ldyBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnKSByZXR1cm4gd2luZG93O1xuXHR9XG59KSgpOyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApIiwiLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gKGV4cG9ydHMpID0+IHtcblx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cdH1cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbn07IiwidmFyIHNjcmlwdFVybDtcbmlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLmcuaW1wb3J0U2NyaXB0cykgc2NyaXB0VXJsID0gX193ZWJwYWNrX3JlcXVpcmVfXy5nLmxvY2F0aW9uICsgXCJcIjtcbnZhciBkb2N1bWVudCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5kb2N1bWVudDtcbmlmICghc2NyaXB0VXJsICYmIGRvY3VtZW50KSB7XG5cdGlmIChkb2N1bWVudC5jdXJyZW50U2NyaXB0KVxuXHRcdHNjcmlwdFVybCA9IGRvY3VtZW50LmN1cnJlbnRTY3JpcHQuc3JjXG5cdGlmICghc2NyaXB0VXJsKSB7XG5cdFx0dmFyIHNjcmlwdHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInNjcmlwdFwiKTtcblx0XHRpZihzY3JpcHRzLmxlbmd0aCkgc2NyaXB0VXJsID0gc2NyaXB0c1tzY3JpcHRzLmxlbmd0aCAtIDFdLnNyY1xuXHR9XG59XG4vLyBXaGVuIHN1cHBvcnRpbmcgYnJvd3NlcnMgd2hlcmUgYW4gYXV0b21hdGljIHB1YmxpY1BhdGggaXMgbm90IHN1cHBvcnRlZCB5b3UgbXVzdCBzcGVjaWZ5IGFuIG91dHB1dC5wdWJsaWNQYXRoIG1hbnVhbGx5IHZpYSBjb25maWd1cmF0aW9uXG4vLyBvciBwYXNzIGFuIGVtcHR5IHN0cmluZyAoXCJcIikgYW5kIHNldCB0aGUgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gdmFyaWFibGUgZnJvbSB5b3VyIGNvZGUgdG8gdXNlIHlvdXIgb3duIGxvZ2ljLlxuaWYgKCFzY3JpcHRVcmwpIHRocm93IG5ldyBFcnJvcihcIkF1dG9tYXRpYyBwdWJsaWNQYXRoIGlzIG5vdCBzdXBwb3J0ZWQgaW4gdGhpcyBicm93c2VyXCIpO1xuc2NyaXB0VXJsID0gc2NyaXB0VXJsLnJlcGxhY2UoLyMuKiQvLCBcIlwiKS5yZXBsYWNlKC9cXD8uKiQvLCBcIlwiKS5yZXBsYWNlKC9cXC9bXlxcL10rJC8sIFwiL1wiKTtcbl9fd2VicGFja19yZXF1aXJlX18ucCA9IHNjcmlwdFVybDsiLCIvLyBubyBiYXNlVVJJXG5cbi8vIG9iamVjdCB0byBzdG9yZSBsb2FkZWQgYW5kIGxvYWRpbmcgY2h1bmtzXG4vLyB1bmRlZmluZWQgPSBjaHVuayBub3QgbG9hZGVkLCBudWxsID0gY2h1bmsgcHJlbG9hZGVkL3ByZWZldGNoZWRcbi8vIFByb21pc2UgPSBjaHVuayBsb2FkaW5nLCAwID0gY2h1bmsgbG9hZGVkXG52YXIgaW5zdGFsbGVkQ2h1bmtzID0ge1xuXHQxNzk6IDBcbn07XG5cblxuX193ZWJwYWNrX3JlcXVpcmVfXy5mLmogPSAoY2h1bmtJZCwgcHJvbWlzZXMpID0+IHtcblx0XHQvLyBKU09OUCBjaHVuayBsb2FkaW5nIGZvciBqYXZhc2NyaXB0XG5cdFx0dmFyIGluc3RhbGxlZENodW5rRGF0YSA9IF9fd2VicGFja19yZXF1aXJlX18ubyhpbnN0YWxsZWRDaHVua3MsIGNodW5rSWQpID8gaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdIDogdW5kZWZpbmVkO1xuXHRcdGlmKGluc3RhbGxlZENodW5rRGF0YSAhPT0gMCkgeyAvLyAwIG1lYW5zIFwiYWxyZWFkeSBpbnN0YWxsZWRcIi5cblxuXHRcdFx0Ly8gYSBQcm9taXNlIG1lYW5zIFwiY3VycmVudGx5IGxvYWRpbmdcIi5cblx0XHRcdGlmKGluc3RhbGxlZENodW5rRGF0YSkge1xuXHRcdFx0XHRwcm9taXNlcy5wdXNoKGluc3RhbGxlZENodW5rRGF0YVsyXSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRpZih0cnVlKSB7IC8vIGFsbCBjaHVua3MgaGF2ZSBKU1xuXHRcdFx0XHRcdC8vIHNldHVwIFByb21pc2UgaW4gY2h1bmsgY2FjaGVcblx0XHRcdFx0XHR2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcblx0XHRcdFx0XHRcdGluc3RhbGxlZENodW5rRGF0YSA9IGluc3RhbGxlZENodW5rc1tjaHVua0lkXSA9IFtyZXNvbHZlLCByZWplY3RdO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdHByb21pc2VzLnB1c2goaW5zdGFsbGVkQ2h1bmtEYXRhWzJdID0gcHJvbWlzZSk7XG5cblx0XHRcdFx0XHQvLyBzdGFydCBjaHVuayBsb2FkaW5nXG5cdFx0XHRcdFx0dmFyIHVybCA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIF9fd2VicGFja19yZXF1aXJlX18udShjaHVua0lkKTtcblx0XHRcdFx0XHQvLyBjcmVhdGUgZXJyb3IgYmVmb3JlIHN0YWNrIHVud291bmQgdG8gZ2V0IHVzZWZ1bCBzdGFja3RyYWNlIGxhdGVyXG5cdFx0XHRcdFx0dmFyIGVycm9yID0gbmV3IEVycm9yKCk7XG5cdFx0XHRcdFx0dmFyIGxvYWRpbmdFbmRlZCA9IChldmVudCkgPT4ge1xuXHRcdFx0XHRcdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGluc3RhbGxlZENodW5rcywgY2h1bmtJZCkpIHtcblx0XHRcdFx0XHRcdFx0aW5zdGFsbGVkQ2h1bmtEYXRhID0gaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdO1xuXHRcdFx0XHRcdFx0XHRpZihpbnN0YWxsZWRDaHVua0RhdGEgIT09IDApIGluc3RhbGxlZENodW5rc1tjaHVua0lkXSA9IHVuZGVmaW5lZDtcblx0XHRcdFx0XHRcdFx0aWYoaW5zdGFsbGVkQ2h1bmtEYXRhKSB7XG5cdFx0XHRcdFx0XHRcdFx0dmFyIGVycm9yVHlwZSA9IGV2ZW50ICYmIChldmVudC50eXBlID09PSAnbG9hZCcgPyAnbWlzc2luZycgOiBldmVudC50eXBlKTtcblx0XHRcdFx0XHRcdFx0XHR2YXIgcmVhbFNyYyA9IGV2ZW50ICYmIGV2ZW50LnRhcmdldCAmJiBldmVudC50YXJnZXQuc3JjO1xuXHRcdFx0XHRcdFx0XHRcdGVycm9yLm1lc3NhZ2UgPSAnTG9hZGluZyBjaHVuayAnICsgY2h1bmtJZCArICcgZmFpbGVkLlxcbignICsgZXJyb3JUeXBlICsgJzogJyArIHJlYWxTcmMgKyAnKSc7XG5cdFx0XHRcdFx0XHRcdFx0ZXJyb3IubmFtZSA9ICdDaHVua0xvYWRFcnJvcic7XG5cdFx0XHRcdFx0XHRcdFx0ZXJyb3IudHlwZSA9IGVycm9yVHlwZTtcblx0XHRcdFx0XHRcdFx0XHRlcnJvci5yZXF1ZXN0ID0gcmVhbFNyYztcblx0XHRcdFx0XHRcdFx0XHRpbnN0YWxsZWRDaHVua0RhdGFbMV0oZXJyb3IpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmwodXJsLCBsb2FkaW5nRW5kZWQsIFwiY2h1bmstXCIgKyBjaHVua0lkLCBjaHVua0lkKTtcblx0XHRcdFx0fSBlbHNlIGluc3RhbGxlZENodW5rc1tjaHVua0lkXSA9IDA7XG5cdFx0XHR9XG5cdFx0fVxufTtcblxuLy8gbm8gcHJlZmV0Y2hpbmdcblxuLy8gbm8gcHJlbG9hZGVkXG5cbi8vIG5vIEhNUlxuXG4vLyBubyBITVIgbWFuaWZlc3RcblxuLy8gbm8gZGVmZXJyZWQgc3RhcnR1cFxuXG4vLyBpbnN0YWxsIGEgSlNPTlAgY2FsbGJhY2sgZm9yIGNodW5rIGxvYWRpbmdcbnZhciB3ZWJwYWNrSnNvbnBDYWxsYmFjayA9IChwYXJlbnRDaHVua0xvYWRpbmdGdW5jdGlvbiwgZGF0YSkgPT4ge1xuXHR2YXIgW2NodW5rSWRzLCBtb3JlTW9kdWxlcywgcnVudGltZV0gPSBkYXRhO1xuXHQvLyBhZGQgXCJtb3JlTW9kdWxlc1wiIHRvIHRoZSBtb2R1bGVzIG9iamVjdCxcblx0Ly8gdGhlbiBmbGFnIGFsbCBcImNodW5rSWRzXCIgYXMgbG9hZGVkIGFuZCBmaXJlIGNhbGxiYWNrXG5cdHZhciBtb2R1bGVJZCwgY2h1bmtJZCwgaSA9IDAsIHJlc29sdmVzID0gW107XG5cdGZvcig7aSA8IGNodW5rSWRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0Y2h1bmtJZCA9IGNodW5rSWRzW2ldO1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhpbnN0YWxsZWRDaHVua3MsIGNodW5rSWQpICYmIGluc3RhbGxlZENodW5rc1tjaHVua0lkXSkge1xuXHRcdFx0cmVzb2x2ZXMucHVzaChpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF1bMF0pO1xuXHRcdH1cblx0XHRpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gPSAwO1xuXHR9XG5cdGZvcihtb2R1bGVJZCBpbiBtb3JlTW9kdWxlcykge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhtb3JlTW9kdWxlcywgbW9kdWxlSWQpKSB7XG5cdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLm1bbW9kdWxlSWRdID0gbW9yZU1vZHVsZXNbbW9kdWxlSWRdO1xuXHRcdH1cblx0fVxuXHRpZihydW50aW1lKSBydW50aW1lKF9fd2VicGFja19yZXF1aXJlX18pO1xuXHRpZihwYXJlbnRDaHVua0xvYWRpbmdGdW5jdGlvbikgcGFyZW50Q2h1bmtMb2FkaW5nRnVuY3Rpb24oZGF0YSk7XG5cdHdoaWxlKHJlc29sdmVzLmxlbmd0aCkge1xuXHRcdHJlc29sdmVzLnNoaWZ0KCkoKTtcblx0fVxuXG59XG5cbnZhciBjaHVua0xvYWRpbmdHbG9iYWwgPSBzZWxmW1wid2VicGFja0NodW5rdG9kb1wiXSA9IHNlbGZbXCJ3ZWJwYWNrQ2h1bmt0b2RvXCJdIHx8IFtdO1xuY2h1bmtMb2FkaW5nR2xvYmFsLmZvckVhY2god2VicGFja0pzb25wQ2FsbGJhY2suYmluZChudWxsLCAwKSk7XG5jaHVua0xvYWRpbmdHbG9iYWwucHVzaCA9IHdlYnBhY2tKc29ucENhbGxiYWNrLmJpbmQobnVsbCwgY2h1bmtMb2FkaW5nR2xvYmFsLnB1c2guYmluZChjaHVua0xvYWRpbmdHbG9iYWwpKTtcblxuLy8gbm8gZGVmZXJyZWQgc3RhcnR1cCIsIi8vIGNvbmNlcm5zIGZvbGRlckxvZ2ljLmpzIGFuZCBkb21Gb2xkZXIuanNcbmxldCBmb2xkZXJOYW1lID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJuZXctZm9sZGVyXCIpO1xubGV0IGZvbGRlckRpc3BsYXkgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImZvbGRlci11bFwiKTtcbmltcG9ydCB7Zm9sZGVyQXJyYXl9IGZyb20gXCIuL2ZvbGRlckxvZ2ljLmpzXCI7XG5cbmxldCBoYW5kbGVOZXdGb2xkZXIgPSAoZnVuY3Rpb24gaGFuZGxlTmV3Rm9sZGVyKCkge1xuICAgIGxldCBkdXBsaWNhdGVzVHJ1ZSA9IGZvbGRlckFycmF5LmZpbmRJbmRleCh4ID0+IHguZm9sZGVyID09PSBmb2xkZXJOYW1lLnZhbHVlKTtcbiAgICBpZiAoZm9sZGVyTmFtZS52YWx1ZSA9PT0gXCJcIikge1xuICAgICAgICByZXR1cm47XG4gICAgfSBlbHNlIGlmIChkdXBsaWNhdGVzVHJ1ZSA9PT0gLTEgfHwgZm9sZGVyQXJyYXkubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIC8vIHBvcHVsYXRlIGFycmF5IHdpdGggb2JqZWN0cyBmb3IgZWFjaCBuZXcgZm9sZGVyXG4gICAgICAgIGltcG9ydChcIi4vZm9sZGVyTG9naWMuanNcIikudGhlbihuZXdGb2xkZXIgPT4ge1xuICAgICAgICAgICAgbmV3Rm9sZGVyLnB1c2hUb0ZvbGRlckFycmF5KGZvbGRlck5hbWUpO1xuICAgICAgICB9KTtcbiAgICAgICAgLy8gcG9wdWxhdGUgdGhlIGRpc3BsYXkgd2l0aCBvbmUgPGxpPiBmb3IgZWFjaCBuZXcgZm9sZGVyXG4gICAgICAgIGltcG9ydChcIi4vZG9tRm9sZGVyLmpzXCIpLnRoZW4obmV3RW50cnkgPT4ge1xuICAgICAgICAgICAgbmV3RW50cnkubmV3Rm9sZGVyKGZvbGRlckRpc3BsYXksIGZvbGRlck5hbWUpO1xuICAgICAgICB9KTtcbiAgICB9XG59KTtcblxuLy8gaGlnaGxpZ2h0aW5nIG9uZSBmb2xkZXIgKG9iai5oaWdobGlnaHQgPSB0cnVlKSBhbmQgYmFja2dyb3VuZGNvbG9yID0gY29sb3JcbmxldCBoaWdobGlnaHQgPSAoZnVuY3Rpb24gaGlnaGxpZ2h0KGV2ZW50KSB7XG4gICAgaWYgKGV2ZW50LnRhcmdldC5pZCA9PT0gXCJmb2xkZXItdWxcIikge1xuICAgICAgICByZXR1cm47XG4gICAgfSBlbHNlIHtcbiAgICAgICAgbGV0IGlubmVyVGV4dCA9IGV2ZW50LnRhcmdldC5pbm5lclRleHQ7XG4gICAgICAgICAgICBpbXBvcnQoXCIuL2ZvbGRlckxvZ2ljLmpzXCIpLnRoZW4oaGlnaGxpZ2h0aW5nID0+IHtcbiAgICAgICAgICAgICAgICBoaWdobGlnaHRpbmcuaGlnaGxpZ2h0VHJ1ZShpbm5lclRleHQpO1xuICAgICAgICB9KTtcbiAgICAgICAgICAgIGltcG9ydChcIi4vZG9tRm9sZGVyLmpzXCIpLnRoZW4oaGlnaGxpZ2h0Q1NTID0+IHtcbiAgICAgICAgICAgICAgICBoaWdobGlnaHRDU1Muc3R5bGVIaWdobGlnaHRlZEZvbGRlcihldmVudC50YXJnZXQpO1xuICAgICAgICB9KTtcbiAgICAgICAgaW1wb3J0KFwiLi90YXNrc0RPTS5qc1wiKS50aGVuKGRpc3BsYXkgPT4ge1xuICAgICAgICAgICAgZGlzcGxheS5kaXNwbGF5VGFza3MoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGltcG9ydCAoXCIuL2RvbUZvbGRlci5qc1wiKS50aGVuKGRpc3BsYXkgPT4ge1xuICAgICAgICAgICAgZGlzcGxheS5zaG93TW9kYWwoKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbn0pO1xuXG4vLyBwb3AgdXAgcmlnaHQtY2xpY2sgbWVudVxubGV0IHJpZ2h0Q2xpY2tNZW51ID0gKGZ1bmN0aW9uIHJpZ2h0Q2xpY2tNZW51KGV2ZW50KSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICBpZiAoZXZlbnQudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucyhcImhpZ2hsaWdodFwiKSkge1xuICAgICAgICBpbXBvcnQoXCIuL2RvbUZvbGRlci5qc1wiKS50aGVuKHJpZ2h0Q2xpY2sgPT4ge1xuICAgICAgICAgICAgcmlnaHRDbGljay5yaWdodENsaWNrSGFuZGxlcihldmVudCkgIFxuICAgICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm47XG4gICAgfVxufSk7XG5cbmxldCB0YXNrTWVudSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidGFzay1tZW51XCIpO1xubGV0IHN0b3JlZFRhc2s7XG5sZXQgZWRpdFRhc2tNZW51ID0gKGZ1bmN0aW9uIGVkaXRUYXNrTWVudShldmVudCkge1xuICAgIFxuICAgIGlmIChldmVudC50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKFwidGFzay1kaXNwbGF5XCIpKSB7XG4gICAgICAgIHN0b3JlZFRhc2sgPSBldmVudC50YXJnZXQ7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHRhc2tNZW51LnN0eWxlLnRvcCA9IGV2ZW50LmNsaWVudFkgKyAxMCArIFwicHhcIjtcbiAgICAgICAgdGFza01lbnUuc3R5bGUubGVmdCA9IGV2ZW50LmNsaWVudFggKyAxMCArIFwicHhcIjtcbiAgICAgICAgdGFza01lbnUuY2xhc3NMaXN0LmFkZChcImFjdGl2ZVwiKTtcbiAgICAgICAgcmV0dXJuIHN0b3JlZFRhc2s7XG4gICAgfSBlbHNlIGlmIChldmVudC50YXJnZXQucGFyZW50Tm9kZS5jbGFzc0xpc3QuY29udGFpbnMoXCJ0YXNrLWRpc3BsYXlcIikpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9O1xufSk7XG5cbmxldCBoYW5kbGVFZGl0ID0gKGZ1bmN0aW9uIGhhbmRsZUVkaXQoZXZlbnQpIHtcbiAgICBpZiAoZXZlbnQudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucyhcInJpZ2h0LWNsaWNrXCIpKSB7XG4gICAgICAgIGxldCB1cGRhdGUgPSB0cnVlO1xuICAgICAgICBsZXQgcmVmZXJlbmNlID0gc3RvcmVkVGFzay5jaGlsZE5vZGVzWzFdLmlubmVyVGV4dDtcbiAgICAgICAgaW1wb3J0KFwiLi9ldmVudExpc3RlbmVyc01vZGFsLmpzXCIpLnRoZW4obW9kYWwgPT4ge1xuICAgICAgICAgICAgbW9kYWwub3Blbk1vZGFsKHVwZGF0ZSwgcmVmZXJlbmNlKTtcbiAgICAgICAgICAgIHRhc2tNZW51LmNsYXNzTGlzdC5yZW1vdmUoXCJhY3RpdmVcIik7ICBcbiAgICAgICAgfSk7XG4gICAgfSBlbHNlIGlmICh0YXNrTWVudS5jbGFzc0xpc3QuY29udGFpbnMoXCJhY3RpdmVcIikpIHtcbiAgICAgICAgdGFza01lbnUuY2xhc3NMaXN0LnJlbW92ZShcImFjdGl2ZVwiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm47XG4gICAgfVxufSlcblxuLy8gZGVsZXRlIGEgRm9sZGVyXG5sZXQgZGVsZXRlRm9sZGVyID0gKGZ1bmN0aW9uIGRlbGV0ZUZvbGRlcihldmVudCkge1xuICAgIGltcG9ydChcIi4vZG9tRm9sZGVyLmpzXCIpLnRoZW4oZGVsSXRlbSA9PiB7XG4gICAgICAgIGRlbEl0ZW0uZGVsRnJvbUxpc3QoKSAgXG4gICAgfSk7XG4gICAgaW1wb3J0KFwiLi9mb2xkZXJMb2dpYy5qc1wiKS50aGVuKGRlbEl0ZW0gPT4ge1xuICAgICAgICBkZWxJdGVtLmRlbExpc3RJdGVtKCkgIFxuICAgIH0pO1xufSk7XG5cbmxldCBnZXRUYXNrTmFtZSA9IChmdW5jdGlvbiBnZXRUYXNrTmFtZShldmVudCkge1xuICAgIGlmIChldmVudC50YXJnZXQuaWQgPT09IFwiYm9keVwiKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9IGVsc2UgaWYoZXZlbnQudGFyZ2V0LmlkID09PSBcInRhc2stZGVsZXRlXCIpIHtcbiAgICAgICAgaW1wb3J0KFwiLi90YXNrc0RPTS5qc1wiKS50aGVuKGRlbFRhc2sgPT4ge1xuICAgICAgICAgICAgZGVsVGFzay5kZWxldGVUYXNrRG9tKGV2ZW50KSAgXG4gICAgICAgIH0pO1xuICAgICAgICBpbXBvcnQoXCIuL3Rhc2tzLmpzXCIpLnRoZW4oZGVsVGFzayA9PiB7XG4gICAgICAgICAgICBkZWxUYXNrLmRlbGV0ZVRhc2soZXZlbnQpICBcbiAgICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChldmVudC50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKFwidGFzay1kaXNwbGF5XCIpIHx8IFxuICAgICAgZXZlbnQudGFyZ2V0LnBhcmVudEVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKFwidGFzay1kaXNwbGF5XCIpKSB7XG4gICAgICAgIGxldCBzZWFyY2hUZXJtOztcbiAgICAgICAgZXZlbnQudGFyZ2V0LmZpcnN0Q2hpbGQuaW5uZXJUZXh0ID09PSBcIlwiID8gc2VhcmNoVGVybSA9IGV2ZW50LnRhcmdldC5jaGlsZE5vZGVzWzFdLmZpcnN0Q2hpbGQubm9kZVZhbHVlIDogXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VhcmNoVGVybSA9IGV2ZW50LnRhcmdldC5wYXJlbnROb2RlLmNoaWxkTm9kZXNbMV0uaW5uZXJUZXh0O1xuICAgICAgICBcbiAgICAgICAgaW1wb3J0KFwiLi90YXNrc0RPTS5qc1wiKS50aGVuKG9wZW4gPT4ge1xuICAgICAgICAgICAgb3Blbi5vcGVuVGFzayhzZWFyY2hUZXJtKSAgXG4gICAgICAgIH0pO1xuICAgICAgICBpbXBvcnQoXCIuL2RvbUZvbGRlci5qc1wiKS50aGVuKGNsb3NlID0+IHtcbiAgICAgICAgICAgIGNsb3NlLmNsb3NlTW9kYWwoKSAgXG4gICAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoZXZlbnQudGFyZ2V0LmlkID09PSBcIm5vdGUtZGVsZXRlXCIpIHtcbiAgICAgICAgLy8gZGVsZXRlIGZyb20gQXJyYXlcbiAgICAgICAgaW1wb3J0KFwiLi90YXNrcy5qc1wiKS50aGVuKGRlbE5vdGUgPT4ge1xuICAgICAgICAgICAgZGVsTm90ZS5kZWxldGVOb3RlKGV2ZW50KSAgXG4gICAgICAgIH0pO1xuICAgICAgICAvL2RlbGV0ZSBmcm9tIGRpc3BsYXlcbiAgICAgICAgaW1wb3J0KFwiLi90YXNrc0RPTS5qc1wiKS50aGVuKGRlbE5vdGUgPT4ge1xuICAgICAgICAgICAgZGVsTm90ZS5kZWxldGVOb3RlRnJvbURpc3BsYXkoZXZlbnQpICBcbiAgICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChldmVudC50YXJnZXQucGFyZW50Tm9kZS5jbGFzc05hbWUgPT09IFwibm90ZS1jb250YWluZXJcIikge1xuICAgICAgICBpbXBvcnQoXCIuL3Rhc2tzRE9NLmpzXCIpLnRoZW4oc3RyaWtlID0+IHtcbiAgICAgICAgICAgIHN0cmlrZS5zdHJpa2VUaHJvdWdoKGV2ZW50KSAgXG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICB9IGVsc2UgaWYgKGV2ZW50LnRhcmdldC5pZCA9PT0gXCJnby1iYWNrXCIgfHwgZXZlbnQudGFyZ2V0LmlkID09PSBcImdvLWJhY2staWNvblwiKSB7XG4gICAgICAgIGltcG9ydChcIi4vdGFza3NET00uanNcIikudGhlbihkaXNwbGF5ID0+IHtcbiAgICAgICAgICAgIGRpc3BsYXkuZGlzcGxheVRhc2tzKCk7XG4gICAgICAgIH0pO1xuICAgICAgICBpbXBvcnQgKFwiLi9kb21Gb2xkZXIuanNcIikudGhlbihkaXNwbGF5ID0+IHtcbiAgICAgICAgICAgIGRpc3BsYXkuc2hvd01vZGFsKCk7XG4gICAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoZXZlbnQudGFyZ2V0LmlkID09PSBcImRlbC10YXNrXCIgfHwgZXZlbnQudGFyZ2V0LmlkID09PSBcImRlbC10YXNrLWljb25cIikge1xuICAgICAgICBsZXQgZGVsZXRlZFRhc2sgPSBldmVudC50YXJnZXQucGFyZW50Tm9kZS5kYXRhc2V0LnBhcmVudDtcbiAgICAgICAgaW1wb3J0KFwiLi90YXNrc0RPTS5qc1wiKS50aGVuKGRpc3BsYXkgPT4ge1xuICAgICAgICAgICAgZGlzcGxheS5kaXNwbGF5VGFza3MoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGltcG9ydCAoXCIuL2RvbUZvbGRlci5qc1wiKS50aGVuKGRpc3BsYXkgPT4ge1xuICAgICAgICAgICAgZGlzcGxheS5zaG93TW9kYWwoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGltcG9ydChcIi4vdGFza3NET00uanNcIikudGhlbihkZWxUYXNrID0+IHtcbiAgICAgICAgICAgIGRlbFRhc2suZGVsZXRlQWxsKGRlbGV0ZWRUYXNrKSAgXG4gICAgICAgIH0pO1xuICAgICAgICBpbXBvcnQoXCIuL3Rhc2tzLmpzXCIpLnRoZW4oZGVsVGFzayA9PiB7XG4gICAgICAgICAgICBkZWxUYXNrLmRlbGV0ZUFsbEluQXJyYXkoZGVsZXRlZFRhc2spICBcbiAgICAgICAgfSk7XG4gICAgfTtcbn0pO1xuXG5leHBvcnQge2hhbmRsZU5ld0ZvbGRlciwgaGlnaGxpZ2h0LCByaWdodENsaWNrTWVudSwgZGVsZXRlRm9sZGVyLCBnZXRUYXNrTmFtZSwgZWRpdFRhc2tNZW51LCBoYW5kbGVFZGl0fTsiLCIvLyBucHggd2VicGFjayAtLXdhdGNoXG5pbXBvcnQge2dldExvY2FsU3RvcmFnZSwgZ2V0QXJyYXl9IGZyb20gXCIuL2xvY2FsU3RvcmFnZS5qc1wiO1xuaW1wb3J0IHtmb2xkZXJBcnJheX0gZnJvbSBcIi4vZm9sZGVyTG9naWMuanNcIjtcbmlmICh3aW5kb3cubG9jYWxTdG9yYWdlLmxlbmd0aCAhPT0gMCkge1xuICAgIGdldExvY2FsU3RvcmFnZSgpO1xufVxuLy8gMiBFdmVudExpc3RlbmVyczogQWRkIGEgbmV3IGZvbGRlciB0byB0aGUgRE9NLWxpc3QgYXMgPGxpPiBhbmQgdG8gdGhlIENvbnRhaW5lci1BcnJheSBhcyBvYmplY3RcbmxldCBidG5OZXdGb2xkZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2FkZC1uZXctYnRuXCIpO1xuaW1wb3J0IHtoYW5kbGVOZXdGb2xkZXJ9IGZyb20gXCIuL2V2ZW50TGlzdGVuZXJzLmpzXCJcbmJ0bk5ld0ZvbGRlci5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgaGFuZGxlTmV3Rm9sZGVyKTtcblxuXG5cbi8vIEV2ZW50TGlzdGVuZXIgdG8gaGlnaGxpZ2h0IG9uZSBmb2xkZXIsIGRlbGV0ZSBpdCBvciByZW5hbWUgaXRcbmxldCBmb2xkZXJBY3Rpb25zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNmb2xkZXItdWxcIik7XG5pbXBvcnQge2hpZ2hsaWdodH0gZnJvbSBcIi4vZXZlbnRMaXN0ZW5lcnMuanNcIjtcbmZvbGRlckFjdGlvbnMuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGhpZ2hsaWdodCk7XG5cblxuLy9ldmVudGxpc3RlbmVyIGZvciByaWdodC1jbGljayBpbnNpZGUgZm9sZGVyLWxpc3QuIFBvcHMgdXAgYSBjdXN0b20gcmlnaHQtY2xpY2sgbWVudVxuaW1wb3J0IHtyaWdodENsaWNrTWVudSwgZGVsZXRlRm9sZGVyfSBmcm9tIFwiLi9ldmVudExpc3RlbmVycy5qc1wiO1xuZm9sZGVyQWN0aW9ucy5hZGRFdmVudExpc3RlbmVyKFwiY29udGV4dG1lbnVcIiwgcmlnaHRDbGlja01lbnUpO1xuLy8gcmVtb3ZlcyB0aGUgcmlnaHQgY2xpY2sgbWVudSBvciBkZWxldGVzIGEgZm9sZGVyIGFuZCB0aGUgb2JqZWN0IGZyb20gYXJyYXlcbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICBpZiAoZXZlbnQudGFyZ2V0LmNsYXNzTGlzdFswXSA9PT0gXCJyaWdodC1jbGljay1pdGVtXCIpIHtcbiAgICAgICAgZGVsZXRlRm9sZGVyKGV2ZW50KTtcbiAgICB9IGVsc2Uge1xuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibWVudVwiKS5jbGFzc0xpc3QucmVtb3ZlKFwiYWN0aXZlXCIpO1xuICAgIH1cbn0pO1xuXG5pbXBvcnQge2VkaXRUYXNrTWVudX0gZnJvbSBcIi4vZXZlbnRMaXN0ZW5lcnMuanNcIjtcbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwiY29udGV4dG1lbnVcIiwgZWRpdFRhc2tNZW51KTtcblxuLy8gb3BlbiBNb2RhbCB0byBjcmVhdGUgYSBuZXcgdGFza1xubGV0IGJ0bk9wZW5Nb2RhbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIub3Blbi1tb2RhbFwiKTtcbmltcG9ydCB7b3Blbk1vZGFsLCBjbG9zZU1vZGFsLCBzdWJtaXRUYXNrfSBmcm9tIFwiLi9ldmVudExpc3RlbmVyc01vZGFsLmpzXCI7XG5idG5PcGVuTW9kYWwuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIG9wZW5Nb2RhbCk7XG5cbi8vIGNsb3NlIE1vZGFsXG5sZXQgYm50Q2xvc2VNb2RhbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubW9kYWwtY2xvc2VcIik7XG5ibnRDbG9zZU1vZGFsLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBjbG9zZU1vZGFsKTtcblxubGV0IG1vZGFsU3VibWl0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiN0YXNrLXN1Ym1cIik7XG5tb2RhbFN1Ym1pdC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgc3VibWl0VGFzayk7XG5cbi8vIG9wZW4gYSAgdGFzayB0byBzZWUgaXQncyBkZXRhaWxzXG5pbXBvcnQge2dldFRhc2tOYW1lfSBmcm9tIFwiLi9ldmVudExpc3RlbmVycy5qc1wiO1xubGV0IHRhc2tEaXNwbGF5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNib2R5XCIpO1xudGFza0Rpc3BsYXkuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGdldFRhc2tOYW1lKTtcblxuaW1wb3J0IHtoYW5kbGVFZGl0fSBmcm9tIFwiLi9ldmVudExpc3RlbmVycy5qc1wiO1xud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBoYW5kbGVFZGl0KTsiXSwic291cmNlUm9vdCI6IiJ9