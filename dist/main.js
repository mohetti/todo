(()=>{"use strict";var e,t,r={71:(e,t,r)=>{r.d(t,{h7:()=>f,Mr:()=>g,qJ:()=>m,Rh:()=>u,bX:()=>o,w4:()=>i,bY:()=>s,Yc:()=>l,_i:()=>d,F1:()=>a,i8:()=>c});var n=r(256);let o=document.querySelector("#task-title"),i=document.querySelector("#task-descr"),l=document.querySelector("#high"),a=document.querySelector("#medium"),d=document.querySelector("#low"),c=document.querySelector("#task-notes"),s=document.querySelector("#task-date"),u=function(){h.classList.remove("bg-active"),o.value="",i.value="",l.checked=!1,a.checked=!1,d.checked=!1,c.value="",s.value=""},h=document.querySelector(".modal-bg"),f=function(){-1!==n.folderArray.findIndex((e=>!0===e.highlight))&&h.classList.add("bg-active")},g=function(){u()},m=function(){let e=n.folderArray[n.folderArray.findIndex((e=>!0===e.highlight))];return-1!==e.tasks.findIndex((e=>e.title===o.value))?alert("You already have a task with this title."):""===o.value?alert("Please enter a title"):!1===l.checked&&!1===a.checked&&!1===d.checked?alert("Please choose a priority"):void r.e(152).then(r.bind(r,152)).then((t=>{t.appendTaskToFolder(e)}))}},256:(e,t,r)=>{r.r(t),r.d(t,{pushToFolderArray:()=>i,folderArray:()=>o,highlightTrue:()=>l,delListItem:()=>a});var n=r(158);let o=[],i=function(e){return o.push(function(e){let t={};return t.folder=e.value,t.highlight=!1,t.tasks=[],t}(e)),(0,n.q)(),o},l=function(e){return o.map((t=>t.folder===e?t.highlight=!0:t.highlight=!1)),(0,n.q)(),o},a=function(){let e=o.findIndex((e=>!0===e.highlight));return o.splice(e,1),(0,n.q)(),o}},158:(e,t,r)=>{r.d(t,{q:()=>o,$:()=>i});var n=r(256);let o=function(){window.localStorage.clear(),localStorage.setItem("containerArray",JSON.stringify(n.folderArray))},i=function(){let e=localStorage.getItem("containerArray"),t=JSON.parse(e);!function(e){let t=document.getElementById("folder-ul");for(let r=0;r<e.length;r++){let n=document.createElement("li");t.appendChild(n),n.innerText=e[r].folder,n.classList.add("folders")}}(t),function(e){for(let t=0;t<e.length;t++)n.folderArray.push(e[t])}(t),console.log(n.folderArray)}}},n={};function o(e){if(n[e])return n[e].exports;var t=n[e]={exports:{}};return r[e](t,t.exports,o),t.exports}o.m=r,o.d=(e,t)=>{for(var r in t)o.o(t,r)&&!o.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},o.f={},o.e=e=>Promise.all(Object.keys(o.f).reduce(((t,r)=>(o.f[r](e,t),t)),[])),o.u=e=>e+".main.js",o.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),e={},t="todo:",o.l=(r,n,i,l)=>{if(e[r])e[r].push(n);else{var a,d;if(void 0!==i)for(var c=document.getElementsByTagName("script"),s=0;s<c.length;s++){var u=c[s];if(u.getAttribute("src")==r||u.getAttribute("data-webpack")==t+i){a=u;break}}a||(d=!0,(a=document.createElement("script")).charset="utf-8",a.timeout=120,o.nc&&a.setAttribute("nonce",o.nc),a.setAttribute("data-webpack",t+i),a.src=r),e[r]=[n];var h=(t,n)=>{a.onerror=a.onload=null,clearTimeout(f);var o=e[r];if(delete e[r],a.parentNode&&a.parentNode.removeChild(a),o&&o.forEach((e=>e(n))),t)return t(n)},f=setTimeout(h.bind(null,void 0,{type:"timeout",target:a}),12e4);a.onerror=h.bind(null,a.onerror),a.onload=h.bind(null,a.onload),d&&document.head.appendChild(a)}},o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e;o.g.importScripts&&(e=o.g.location+"");var t=o.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");r.length&&(e=r[r.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),o.p=e})(),(()=>{var e={179:0};o.f.j=(t,r)=>{var n=o.o(e,t)?e[t]:void 0;if(0!==n)if(n)r.push(n[2]);else{var i=new Promise(((r,o)=>{n=e[t]=[r,o]}));r.push(n[2]=i);var l=o.p+o.u(t),a=new Error;o.l(l,(r=>{if(o.o(e,t)&&(0!==(n=e[t])&&(e[t]=void 0),n)){var i=r&&("load"===r.type?"missing":r.type),l=r&&r.target&&r.target.src;a.message="Loading chunk "+t+" failed.\n("+i+": "+l+")",a.name="ChunkLoadError",a.type=i,a.request=l,n[1](a)}}),"chunk-"+t,t)}};var t=(t,r)=>{for(var n,i,[l,a,d]=r,c=0,s=[];c<l.length;c++)i=l[c],o.o(e,i)&&e[i]&&s.push(e[i][0]),e[i]=0;for(n in a)o.o(a,n)&&(o.m[n]=a[n]);for(d&&d(o),t&&t(r);s.length;)s.shift()()},r=self.webpackChunktodo=self.webpackChunktodo||[];r.forEach(t.bind(null,0)),r.push=t.bind(null,r.push.bind(r))})(),(()=>{var e=o(158),t=o(256);let r=document.getElementById("new-folder"),n=document.getElementById("folder-ul");var i=o(71);0!==window.localStorage.length&&(0,e.$)(),document.querySelector("#add-new-btn").addEventListener("click",(function(){let e=t.folderArray.findIndex((e=>e.folder===r.value));""!==r.value&&(-1!==e&&0!==t.folderArray.length||(Promise.resolve().then(o.bind(o,256)).then((e=>{e.pushToFolderArray(r)})),o.e(185).then(o.bind(o,185)).then((e=>{e.newFolder(n,r)}))))}));let l=document.querySelector("#folder-ul");l.addEventListener("click",(function(e){if("folder-ul"!==e.target.id){let t=e.target.innerText;Promise.resolve().then(o.bind(o,256)).then((e=>{e.highlightTrue(t)})),o.e(185).then(o.bind(o,185)).then((t=>{t.styleHighlightedFolder(e.target)})),o.e(520).then(o.bind(o,520)).then((e=>{e.displayTasks()}))}})),l.addEventListener("contextmenu",(function(e){e.preventDefault(),e.target.classList.contains("highlight")&&o.e(185).then(o.bind(o,185)).then((t=>{t.rightClickHandler(e)}))})),window.addEventListener("click",(function(e){"right-click-item"===e.target.classList[0]?(o.e(185).then(o.bind(o,185)).then((e=>{e.delFromList()})),Promise.resolve().then(o.bind(o,256)).then((e=>{e.delListItem()}))):document.getElementById("menu").classList.remove("active")})),document.querySelector(".open-modal").addEventListener("click",i.h7),document.querySelector(".modal-close").addEventListener("click",i.Mr),document.querySelector("#task-subm").addEventListener("click",i.qJ),document.querySelector("#body").addEventListener("click",(function(e){if("body"!==e.target.id&&(e.target.classList.contains("task-display")||e.target.parentElement.classList.contains("task-display"))){let t;t=void 0===e.target.firstChild.innerText?e.target.parentElement.firstChild.innerText:e.target.firstChild.innerText,o.e(520).then(o.bind(o,520)).then((e=>{e.openTask(t)}))}}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,