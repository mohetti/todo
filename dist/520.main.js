(self.webpackChunktodo=self.webpackChunktodo||[]).push([[520],{520:(e,t,d)=>{"use strict";d.r(t),d.d(t,{displayTasks:()=>i,render:()=>r,openTask:()=>a});var n=d(256);let l=document.querySelector("#body"),r=function(){for(;l.firstChild;)l.removeChild(l.firstChild)},i=function(){r();let e=n.folderArray[n.folderArray.findIndex((e=>!0===e.highlight))],t=e.tasks;for(let n=0;n<t.length;n++){let r=document.createElement("ul");r.classList.add("task-display"),l.appendChild(r);let a=document.createElement("li");r.appendChild(a),a.innerText=t[n].title;let o=document.createElement("li");r.appendChild(o),o.innerText=t[n].date,d=r,"low"===(i=e.tasks[n].prio)?d.style.backgroundColor="green":"med"===i?d.style.backgroundColor="yellow":"high"===i&&(d.style.backgroundColor="red")}var d,i},a=function(e){let t=n.folderArray[n.folderArray.findIndex((e=>!0===e.highlight))].tasks;r();let d=t.findIndex((t=>t.title===e)),i=document.createElement("h2");i.id="task-text",l.appendChild(i),i.innerText=e;let a=document.createElement("h4");a.id="date-text",l.appendChild(a),a.innerText=t[d].date;let o=document.createElement("div");o.id="descr-text",l.appendChild(o),o.innerText=t[d].descr;for(let e=0;e<t[d].notes.length;e++){let n=document.createElement("div");n.classList.add("notes-text"),l.appendChild(n),n.innerText=t[d].notes[e]}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90b2RvLy4vc3JjL3Rhc2tzRE9NLmpzIl0sIm5hbWVzIjpbImJvZHlEaXNwbGF5IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwicmVuZGVyIiwiZmlyc3RDaGlsZCIsInJlbW92ZUNoaWxkIiwiZGlzcGxheVRhc2tzIiwiaGlnaGxpZ2h0ZWRGb2xkZXIiLCJmb2xkZXJBcnJheSIsIngiLCJoaWdobGlnaHQiLCJoaWdobGlnaHRlZFRhc2tzIiwidGFza3MiLCJpIiwibGVuZ3RoIiwibGlzdENvbnRhaW5lciIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc0xpc3QiLCJhZGQiLCJhcHBlbmRDaGlsZCIsInRpdGxlRGlzcGxheSIsImlubmVyVGV4dCIsInRpdGxlIiwiZGF0ZURpc3BsYXkiLCJkYXRlIiwiY29udGFpbmVyIiwicHJpbyIsInN0eWxlIiwiYmFja2dyb3VuZENvbG9yIiwib3BlblRhc2siLCJzZWFyY2hUZXJtIiwib2JqIiwiZmluZEluZGV4IiwidGFza1RleHQiLCJpZCIsImRhdGVUZXh0IiwiZGVzY3JUZXh0IiwiZGVzY3IiLCJub3RlcyIsIm5vdGVzVGV4dCJdLCJtYXBwaW5ncyI6InNLQUNBLElBQUlBLEVBQWNDLFNBQVNDLGNBQWMsU0FFckNDLEVBQVMsV0FDVCxLQUFPSCxFQUFZSSxZQUNmSixFQUFZSyxZQUFZTCxFQUFZSSxhQWN4Q0UsRUFBZSxXQUNmSCxJQUNBLElBQUlJLEVBQW9CLEVBQUFDLFlBQVksRUFBQUEsWUFBQSxXQUFzQkMsSUFBcUIsSUFBaEJBLEVBQUVDLGFBQzdEQyxFQUFtQkosRUFBa0JLLE1BQ3pDLElBQUssSUFBSUMsRUFBSSxFQUFHQSxFQUFJRixFQUFpQkcsT0FBUUQsSUFBSyxDQUM5QyxJQUFJRSxFQUFnQmQsU0FBU2UsY0FBYyxNQUMzQ0QsRUFBY0UsVUFBVUMsSUFBSSxnQkFDNUJsQixFQUFZbUIsWUFBWUosR0FFeEIsSUFBSUssRUFBZW5CLFNBQVNlLGNBQWMsTUFDMUNELEVBQWNJLFlBQVlDLEdBQzFCQSxFQUFhQyxVQUFZVixFQUFpQkUsR0FBR1MsTUFFN0MsSUFBSUMsRUFBY3RCLFNBQVNlLGNBQWMsTUFDekNELEVBQWNJLFlBQVlJLEdBQzFCQSxFQUFZRixVQUFZVixFQUFpQkUsR0FBR1csS0F6QkVDLEVBMkIzQlYsRUExQlYsU0FEZ0RXLEVBMkJ2Qm5CLEVBQWtCSyxNQUFNQyxHQUFHYSxNQXpCN0RELEVBQVVFLE1BQU1DLGdCQUFrQixRQUNsQixRQUFURixFQUNQRCxFQUFVRSxNQUFNQyxnQkFBa0IsU0FDbEIsU0FBVEYsSUFDUEQsRUFBVUUsTUFBTUMsZ0JBQWtCLE9BTmpCLElBQTZCSCxFQUFXQyxHQWdDN0RHLEVBQVcsU0FBbUJDLEdBQzlCLElBQ0luQixFQURvQixFQUFBSCxZQUFZLEVBQUFBLFlBQUEsV0FBc0JDLElBQXFCLElBQWhCQSxFQUFFQyxhQUN4QkUsTUFDekNULElBQ0EsSUFBSTRCLEVBQU1wQixFQUFpQnFCLFdBQVV2QixHQUFLQSxFQUFFYSxRQUFVUSxJQUVsREcsRUFBV2hDLFNBQVNlLGNBQWMsTUFDdENpQixFQUFTQyxHQUFLLFlBQ2RsQyxFQUFZbUIsWUFBWWMsR0FDeEJBLEVBQVNaLFVBQVlTLEVBRXJCLElBQUlLLEVBQVdsQyxTQUFTZSxjQUFjLE1BQ3RDbUIsRUFBU0QsR0FBSyxZQUNkbEMsRUFBWW1CLFlBQVlnQixHQUN4QkEsRUFBU2QsVUFBWVYsRUFBaUJvQixHQUFLUCxLQUUzQyxJQUFJWSxFQUFZbkMsU0FBU2UsY0FBYyxPQUN2Q29CLEVBQVVGLEdBQUssYUFDZmxDLEVBQVltQixZQUFZaUIsR0FDeEJBLEVBQVVmLFVBQVlWLEVBQWlCb0IsR0FBS00sTUFFNUMsSUFBSyxJQUFJeEIsRUFBSSxFQUFHQSxFQUFJRixFQUFpQm9CLEdBQUtPLE1BQU14QixPQUFRRCxJQUFLLENBQ3pELElBQUkwQixFQUFZdEMsU0FBU2UsY0FBYyxPQUN2Q3VCLEVBQVV0QixVQUFVQyxJQUFJLGNBQ3hCbEIsRUFBWW1CLFlBQVlvQixHQUN4QkEsRUFBVWxCLFVBQVlWLEVBQWlCb0IsR0FBS08sTUFBTXpCIiwiZmlsZSI6IjUyMC5tYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtmb2xkZXJBcnJheX0gZnJvbSBcIi4vZm9sZGVyTG9naWMuanNcIjtcbmxldCBib2R5RGlzcGxheSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjYm9keVwiKTtcblxubGV0IHJlbmRlciA9IChmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgd2hpbGUgKGJvZHlEaXNwbGF5LmZpcnN0Q2hpbGQpIHtcbiAgICAgICAgYm9keURpc3BsYXkucmVtb3ZlQ2hpbGQoYm9keURpc3BsYXkuZmlyc3RDaGlsZCk7XG4gICAgfVxufSk7XG5cbmxldCBoaWdobGlnaHRpbmdGb2xkZXIgPSAoZnVuY3Rpb24gaGlnaGxpZ2h0aW5nRm9sZGVyKGNvbnRhaW5lciwgcHJpbykge1xuICAgIGlmIChwcmlvID09PSBcImxvd1wiKSB7XG4gICAgICAgIGNvbnRhaW5lci5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcImdyZWVuXCI7XG4gICAgfSBlbHNlIGlmIChwcmlvID09PSBcIm1lZFwiKSB7XG4gICAgICAgIGNvbnRhaW5lci5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcInllbGxvd1wiO1xuICAgIH0gZWxzZSBpZiAocHJpbyA9PT0gXCJoaWdoXCIpIHtcbiAgICAgICAgY29udGFpbmVyLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwicmVkXCI7XG4gICAgfVxufSlcblxubGV0IGRpc3BsYXlUYXNrcyA9IChmdW5jdGlvbiBkaXNwbGF5VGFza3MoKSB7XG4gICAgcmVuZGVyKCk7XG4gICAgbGV0IGhpZ2hsaWdodGVkRm9sZGVyID0gZm9sZGVyQXJyYXlbZm9sZGVyQXJyYXkuZmluZEluZGV4KHggPT4geC5oaWdobGlnaHQgPT09IHRydWUpXTtcbiAgICBsZXQgaGlnaGxpZ2h0ZWRUYXNrcyA9IGhpZ2hsaWdodGVkRm9sZGVyLnRhc2tzO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaGlnaGxpZ2h0ZWRUYXNrcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBsZXQgbGlzdENvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ1bFwiKTtcbiAgICAgICAgbGlzdENvbnRhaW5lci5jbGFzc0xpc3QuYWRkKFwidGFzay1kaXNwbGF5XCIpO1xuICAgICAgICBib2R5RGlzcGxheS5hcHBlbmRDaGlsZChsaXN0Q29udGFpbmVyKTtcbiAgICAgICAgXG4gICAgICAgIGxldCB0aXRsZURpc3BsYXkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlcIik7XG4gICAgICAgIGxpc3RDb250YWluZXIuYXBwZW5kQ2hpbGQodGl0bGVEaXNwbGF5KTtcbiAgICAgICAgdGl0bGVEaXNwbGF5LmlubmVyVGV4dCA9IGhpZ2hsaWdodGVkVGFza3NbaV0udGl0bGU7XG5cbiAgICAgICAgbGV0IGRhdGVEaXNwbGF5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpXCIpO1xuICAgICAgICBsaXN0Q29udGFpbmVyLmFwcGVuZENoaWxkKGRhdGVEaXNwbGF5KTtcbiAgICAgICAgZGF0ZURpc3BsYXkuaW5uZXJUZXh0ID0gaGlnaGxpZ2h0ZWRUYXNrc1tpXS5kYXRlO1xuICAgICAgICBcbiAgICAgICAgaGlnaGxpZ2h0aW5nRm9sZGVyKGxpc3RDb250YWluZXIsIGhpZ2hsaWdodGVkRm9sZGVyLnRhc2tzW2ldLnByaW8pO1xuICAgIH07XG5cbn0pO1xuXG5sZXQgb3BlblRhc2sgPSAoZnVuY3Rpb24gb3BlblRhc2soc2VhcmNoVGVybSkge1xuICAgIGxldCBoaWdobGlnaHRlZEZvbGRlciA9IGZvbGRlckFycmF5W2ZvbGRlckFycmF5LmZpbmRJbmRleCh4ID0+IHguaGlnaGxpZ2h0ID09PSB0cnVlKV07XG4gICAgbGV0IGhpZ2hsaWdodGVkVGFza3MgPSBoaWdobGlnaHRlZEZvbGRlci50YXNrcztcbiAgICByZW5kZXIoKTtcbiAgICBsZXQgb2JqID0gaGlnaGxpZ2h0ZWRUYXNrcy5maW5kSW5kZXgoeCA9PiB4LnRpdGxlID09PSBzZWFyY2hUZXJtKTtcblxuICAgIGxldCB0YXNrVGV4dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJoMlwiKTtcbiAgICB0YXNrVGV4dC5pZCA9IFwidGFzay10ZXh0XCI7XG4gICAgYm9keURpc3BsYXkuYXBwZW5kQ2hpbGQodGFza1RleHQpO1xuICAgIHRhc2tUZXh0LmlubmVyVGV4dCA9IHNlYXJjaFRlcm07XG5cbiAgICBsZXQgZGF0ZVRleHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaDRcIik7XG4gICAgZGF0ZVRleHQuaWQgPSBcImRhdGUtdGV4dFwiO1xuICAgIGJvZHlEaXNwbGF5LmFwcGVuZENoaWxkKGRhdGVUZXh0KTtcbiAgICBkYXRlVGV4dC5pbm5lclRleHQgPSBoaWdobGlnaHRlZFRhc2tzW29ial0uZGF0ZTtcblxuICAgIGxldCBkZXNjclRleHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIGRlc2NyVGV4dC5pZCA9IFwiZGVzY3ItdGV4dFwiO1xuICAgIGJvZHlEaXNwbGF5LmFwcGVuZENoaWxkKGRlc2NyVGV4dCk7XG4gICAgZGVzY3JUZXh0LmlubmVyVGV4dCA9IGhpZ2hsaWdodGVkVGFza3Nbb2JqXS5kZXNjcjtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaGlnaGxpZ2h0ZWRUYXNrc1tvYmpdLm5vdGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxldCBub3Rlc1RleHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICBub3Rlc1RleHQuY2xhc3NMaXN0LmFkZChcIm5vdGVzLXRleHRcIik7XG4gICAgICAgIGJvZHlEaXNwbGF5LmFwcGVuZENoaWxkKG5vdGVzVGV4dCk7XG4gICAgICAgIG5vdGVzVGV4dC5pbm5lclRleHQgPSBoaWdobGlnaHRlZFRhc2tzW29ial0ubm90ZXNbaV07XG4gICAgfVxufSk7XG5cbmV4cG9ydCB7ZGlzcGxheVRhc2tzLCByZW5kZXIsIG9wZW5UYXNrfTsiXSwic291cmNlUm9vdCI6IiJ9